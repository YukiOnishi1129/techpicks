// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String? 
  oauth_token        String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isSuperAdmin  Boolean? @default(false) @map("is_super_admin")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FeedArticleRelation {
  id           String   @id @default(uuid())
  feedId       String @map("feed_id")
  articleId    String @map("article_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  feed         Feed  @relation(fields: [feedId], references: [id], onDelete: Cascade)
  article      Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("feed_article_relations")

}

model Article {
  id           String   @id @default(uuid())
  platformId   String @map("platform_id")
  title        String
  description  String
  articleUrl   String @map("article_url")
  publishedAt  DateTime @map("published_at")
  thumbnailURL String @map("thumbnail_url")
  isPrivate    Boolean @map("is_private")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  feedArticleRelatoins FeedArticleRelation[]

  platform     Platform  @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@map("articles")

}

model Feed {
  id           String   @id @default(uuid())
  name         String
  platformId   String @map("platform_id")
  categoryId   String @map("category_id")
  siteUrl      String @map("site_url")
  rssUrl       String @map("rss_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  platform     Platform  @relation(fields: [platformId], references: [id], onDelete: Cascade)
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  feedArticleRelatoins FeedArticleRelation[]

  @@map("feeds")
}


model Category {
  id           String   @id @default(uuid())
  name         String
  type         Int 
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  feeds        Feed[]

  @@map("categories")
}


model Platform {
  id           String   @id @default(uuid())
  name         String
  siteUrl      String @map("site_url")
  platformType Int @map("platform_type")
  faviconUrl   String @map("favicon_url")
  isEng        Boolean @default(false) @map("is_eng")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  feeds        Feed[]
  articles     Article[]

  @@map("platforms")
}