// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: favorite/favorite.proto

package favorite

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetFavoriteArticleFolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteArticleFolder *FavoriteArticleFolder `protobuf:"bytes,1,opt,name=favoriteArticleFolder,proto3" json:"favoriteArticleFolder,omitempty"`
}

func (x *GetFavoriteArticleFolderResponse) Reset() {
	*x = GetFavoriteArticleFolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteArticleFolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteArticleFolderResponse) ProtoMessage() {}

func (x *GetFavoriteArticleFolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteArticleFolderResponse.ProtoReflect.Descriptor instead.
func (*GetFavoriteArticleFolderResponse) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{0}
}

func (x *GetFavoriteArticleFolderResponse) GetFavoriteArticleFolder() *FavoriteArticleFolder {
	if x != nil {
		return x.FavoriteArticleFolder
	}
	return nil
}

type GetFavoriteArticleFolderByArticleIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId string `protobuf:"bytes,1,opt,name=articleId,proto3" json:"articleId,omitempty"`
}

func (x *GetFavoriteArticleFolderByArticleIdRequest) Reset() {
	*x = GetFavoriteArticleFolderByArticleIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteArticleFolderByArticleIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteArticleFolderByArticleIdRequest) ProtoMessage() {}

func (x *GetFavoriteArticleFolderByArticleIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteArticleFolderByArticleIdRequest.ProtoReflect.Descriptor instead.
func (*GetFavoriteArticleFolderByArticleIdRequest) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{1}
}

func (x *GetFavoriteArticleFolderByArticleIdRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

type FavoriteArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ArticleId               string                  `protobuf:"bytes,2,opt,name=articleId,proto3" json:"articleId,omitempty"`
	PlatformId              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=platformId,proto3" json:"platformId,omitempty"`
	FavoriteArticleFolderId string                  `protobuf:"bytes,4,opt,name=favoriteArticleFolderId,proto3" json:"favoriteArticleFolderId,omitempty"`
	UserId                  string                  `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	Title                   string                  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	ThumbnailUrl            string                  `protobuf:"bytes,7,opt,name=thumbnailUrl,proto3" json:"thumbnailUrl,omitempty"`
	ArticleUrl              string                  `protobuf:"bytes,8,opt,name=articleUrl,proto3" json:"articleUrl,omitempty"`
	PlatformFaviconUrl      string                  `protobuf:"bytes,9,opt,name=platformFaviconUrl,proto3" json:"platformFaviconUrl,omitempty"`
	PublishedAt             *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=publishedAt,proto3" json:"publishedAt,omitempty"`
	AuthorName              *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=authorName,proto3" json:"authorName,omitempty"`
	Tags                    *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	PlatformName            string                  `protobuf:"bytes,13,opt,name=platformName,proto3" json:"platformName,omitempty"`
	PlatformUrl             string                  `protobuf:"bytes,14,opt,name=platformUrl,proto3" json:"platformUrl,omitempty"`
	IsEng                   bool                    `protobuf:"varint,15,opt,name=isEng,proto3" json:"isEng,omitempty"`
	IsPrivate               bool                    `protobuf:"varint,16,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	IsRead                  bool                    `protobuf:"varint,17,opt,name=isRead,proto3" json:"isRead,omitempty"`
	CreatedAt               string                  `protobuf:"bytes,18,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt               string                  `protobuf:"bytes,19,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *FavoriteArticle) Reset() {
	*x = FavoriteArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteArticle) ProtoMessage() {}

func (x *FavoriteArticle) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteArticle.ProtoReflect.Descriptor instead.
func (*FavoriteArticle) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{2}
}

func (x *FavoriteArticle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FavoriteArticle) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *FavoriteArticle) GetPlatformId() *wrapperspb.StringValue {
	if x != nil {
		return x.PlatformId
	}
	return nil
}

func (x *FavoriteArticle) GetFavoriteArticleFolderId() string {
	if x != nil {
		return x.FavoriteArticleFolderId
	}
	return ""
}

func (x *FavoriteArticle) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FavoriteArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FavoriteArticle) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *FavoriteArticle) GetArticleUrl() string {
	if x != nil {
		return x.ArticleUrl
	}
	return ""
}

func (x *FavoriteArticle) GetPlatformFaviconUrl() string {
	if x != nil {
		return x.PlatformFaviconUrl
	}
	return ""
}

func (x *FavoriteArticle) GetPublishedAt() *wrapperspb.StringValue {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *FavoriteArticle) GetAuthorName() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthorName
	}
	return nil
}

func (x *FavoriteArticle) GetTags() *wrapperspb.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FavoriteArticle) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *FavoriteArticle) GetPlatformUrl() string {
	if x != nil {
		return x.PlatformUrl
	}
	return ""
}

func (x *FavoriteArticle) GetIsEng() bool {
	if x != nil {
		return x.IsEng
	}
	return false
}

func (x *FavoriteArticle) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *FavoriteArticle) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *FavoriteArticle) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FavoriteArticle) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type FavoriteArticleFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   string `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   string `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *FavoriteArticleFolder) Reset() {
	*x = FavoriteArticleFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteArticleFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteArticleFolder) ProtoMessage() {}

func (x *FavoriteArticleFolder) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteArticleFolder.ProtoReflect.Descriptor instead.
func (*FavoriteArticleFolder) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{3}
}

func (x *FavoriteArticleFolder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FavoriteArticleFolder) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FavoriteArticleFolder) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FavoriteArticleFolder) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FavoriteArticleFolder) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FavoriteArticleFolder) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_favorite_favorite_proto protoreflect.FileDescriptor

var file_favorite_favorite_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x2a, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd7, 0x05, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x45,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xb7, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x42, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73,
	0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x59, 0x75, 0x6b, 0x69, 0x4f, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x31, 0x31, 0x32, 0x39, 0x2f, 0x74,
	0x65, 0x63, 0x68, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_favorite_favorite_proto_rawDescOnce sync.Once
	file_favorite_favorite_proto_rawDescData = file_favorite_favorite_proto_rawDesc
)

func file_favorite_favorite_proto_rawDescGZIP() []byte {
	file_favorite_favorite_proto_rawDescOnce.Do(func() {
		file_favorite_favorite_proto_rawDescData = protoimpl.X.CompressGZIP(file_favorite_favorite_proto_rawDescData)
	})
	return file_favorite_favorite_proto_rawDescData
}

var file_favorite_favorite_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_favorite_favorite_proto_goTypes = []any{
	(*GetFavoriteArticleFolderResponse)(nil),           // 0: checkpicks.favorite.v1.GetFavoriteArticleFolderResponse
	(*GetFavoriteArticleFolderByArticleIdRequest)(nil), // 1: checkpicks.favorite.v1.GetFavoriteArticleFolderByArticleIdRequest
	(*FavoriteArticle)(nil),                            // 2: checkpicks.favorite.v1.FavoriteArticle
	(*FavoriteArticleFolder)(nil),                      // 3: checkpicks.favorite.v1.FavoriteArticleFolder
	(*wrapperspb.StringValue)(nil),                     // 4: google.protobuf.StringValue
}
var file_favorite_favorite_proto_depIdxs = []int32{
	3, // 0: checkpicks.favorite.v1.GetFavoriteArticleFolderResponse.favoriteArticleFolder:type_name -> checkpicks.favorite.v1.FavoriteArticleFolder
	4, // 1: checkpicks.favorite.v1.FavoriteArticle.platformId:type_name -> google.protobuf.StringValue
	4, // 2: checkpicks.favorite.v1.FavoriteArticle.publishedAt:type_name -> google.protobuf.StringValue
	4, // 3: checkpicks.favorite.v1.FavoriteArticle.authorName:type_name -> google.protobuf.StringValue
	4, // 4: checkpicks.favorite.v1.FavoriteArticle.tags:type_name -> google.protobuf.StringValue
	1, // 5: checkpicks.favorite.v1.FavoriteService.GetFavoriteArticleFolderByArticleId:input_type -> checkpicks.favorite.v1.GetFavoriteArticleFolderByArticleIdRequest
	0, // 6: checkpicks.favorite.v1.FavoriteService.GetFavoriteArticleFolderByArticleId:output_type -> checkpicks.favorite.v1.GetFavoriteArticleFolderResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_favorite_favorite_proto_init() }
func file_favorite_favorite_proto_init() {
	if File_favorite_favorite_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_favorite_favorite_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteArticleFolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteArticleFolderByArticleIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FavoriteArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FavoriteArticleFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_favorite_favorite_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_favorite_favorite_proto_goTypes,
		DependencyIndexes: file_favorite_favorite_proto_depIdxs,
		MessageInfos:      file_favorite_favorite_proto_msgTypes,
	}.Build()
	File_favorite_favorite_proto = out.File
	file_favorite_favorite_proto_rawDesc = nil
	file_favorite_favorite_proto_goTypes = nil
	file_favorite_favorite_proto_depIdxs = nil
}
