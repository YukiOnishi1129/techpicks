// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FavoriteArticleFolder is an object representing the database table.
type FavoriteArticleFolder struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *favoriteArticleFolderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L favoriteArticleFolderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FavoriteArticleFolderColumns = struct {
	ID          string
	UserID      string
	Title       string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	Title:       "title",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var FavoriteArticleFolderTableColumns = struct {
	ID          string
	UserID      string
	Title       string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "favorite_article_folders.id",
	UserID:      "favorite_article_folders.user_id",
	Title:       "favorite_article_folders.title",
	Description: "favorite_article_folders.description",
	CreatedAt:   "favorite_article_folders.created_at",
	UpdatedAt:   "favorite_article_folders.updated_at",
}

// Generated where

var FavoriteArticleFolderWhere = struct {
	ID          whereHelperstring
	UserID      whereHelperstring
	Title       whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"favorite_article_folders\".\"id\""},
	UserID:      whereHelperstring{field: "\"favorite_article_folders\".\"user_id\""},
	Title:       whereHelperstring{field: "\"favorite_article_folders\".\"title\""},
	Description: whereHelpernull_String{field: "\"favorite_article_folders\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"favorite_article_folders\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"favorite_article_folders\".\"updated_at\""},
}

// FavoriteArticleFolderRels is where relationship names are stored.
var FavoriteArticleFolderRels = struct {
	FavoriteArticles string
}{
	FavoriteArticles: "FavoriteArticles",
}

// favoriteArticleFolderR is where relationships are stored.
type favoriteArticleFolderR struct {
	FavoriteArticles FavoriteArticleSlice `boil:"FavoriteArticles" json:"FavoriteArticles" toml:"FavoriteArticles" yaml:"FavoriteArticles"`
}

// NewStruct creates a new relationship struct
func (*favoriteArticleFolderR) NewStruct() *favoriteArticleFolderR {
	return &favoriteArticleFolderR{}
}

func (r *favoriteArticleFolderR) GetFavoriteArticles() FavoriteArticleSlice {
	if r == nil {
		return nil
	}
	return r.FavoriteArticles
}

// favoriteArticleFolderL is where Load methods for each relationship are stored.
type favoriteArticleFolderL struct{}

var (
	favoriteArticleFolderAllColumns            = []string{"id", "user_id", "title", "description", "created_at", "updated_at"}
	favoriteArticleFolderColumnsWithoutDefault = []string{"user_id", "title"}
	favoriteArticleFolderColumnsWithDefault    = []string{"id", "description", "created_at", "updated_at"}
	favoriteArticleFolderPrimaryKeyColumns     = []string{"id"}
	favoriteArticleFolderGeneratedColumns      = []string{}
)

type (
	// FavoriteArticleFolderSlice is an alias for a slice of pointers to FavoriteArticleFolder.
	// This should almost always be used instead of []FavoriteArticleFolder.
	FavoriteArticleFolderSlice []*FavoriteArticleFolder
	// FavoriteArticleFolderHook is the signature for custom FavoriteArticleFolder hook methods
	FavoriteArticleFolderHook func(context.Context, boil.ContextExecutor, *FavoriteArticleFolder) error

	favoriteArticleFolderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	favoriteArticleFolderType                 = reflect.TypeOf(&FavoriteArticleFolder{})
	favoriteArticleFolderMapping              = queries.MakeStructMapping(favoriteArticleFolderType)
	favoriteArticleFolderPrimaryKeyMapping, _ = queries.BindMapping(favoriteArticleFolderType, favoriteArticleFolderMapping, favoriteArticleFolderPrimaryKeyColumns)
	favoriteArticleFolderInsertCacheMut       sync.RWMutex
	favoriteArticleFolderInsertCache          = make(map[string]insertCache)
	favoriteArticleFolderUpdateCacheMut       sync.RWMutex
	favoriteArticleFolderUpdateCache          = make(map[string]updateCache)
	favoriteArticleFolderUpsertCacheMut       sync.RWMutex
	favoriteArticleFolderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var favoriteArticleFolderAfterSelectMu sync.Mutex
var favoriteArticleFolderAfterSelectHooks []FavoriteArticleFolderHook

var favoriteArticleFolderBeforeInsertMu sync.Mutex
var favoriteArticleFolderBeforeInsertHooks []FavoriteArticleFolderHook
var favoriteArticleFolderAfterInsertMu sync.Mutex
var favoriteArticleFolderAfterInsertHooks []FavoriteArticleFolderHook

var favoriteArticleFolderBeforeUpdateMu sync.Mutex
var favoriteArticleFolderBeforeUpdateHooks []FavoriteArticleFolderHook
var favoriteArticleFolderAfterUpdateMu sync.Mutex
var favoriteArticleFolderAfterUpdateHooks []FavoriteArticleFolderHook

var favoriteArticleFolderBeforeDeleteMu sync.Mutex
var favoriteArticleFolderBeforeDeleteHooks []FavoriteArticleFolderHook
var favoriteArticleFolderAfterDeleteMu sync.Mutex
var favoriteArticleFolderAfterDeleteHooks []FavoriteArticleFolderHook

var favoriteArticleFolderBeforeUpsertMu sync.Mutex
var favoriteArticleFolderBeforeUpsertHooks []FavoriteArticleFolderHook
var favoriteArticleFolderAfterUpsertMu sync.Mutex
var favoriteArticleFolderAfterUpsertHooks []FavoriteArticleFolderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FavoriteArticleFolder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FavoriteArticleFolder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FavoriteArticleFolder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FavoriteArticleFolder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FavoriteArticleFolder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FavoriteArticleFolder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FavoriteArticleFolder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FavoriteArticleFolder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FavoriteArticleFolder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleFolderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFavoriteArticleFolderHook registers your hook function for all future operations.
func AddFavoriteArticleFolderHook(hookPoint boil.HookPoint, favoriteArticleFolderHook FavoriteArticleFolderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		favoriteArticleFolderAfterSelectMu.Lock()
		favoriteArticleFolderAfterSelectHooks = append(favoriteArticleFolderAfterSelectHooks, favoriteArticleFolderHook)
		favoriteArticleFolderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		favoriteArticleFolderBeforeInsertMu.Lock()
		favoriteArticleFolderBeforeInsertHooks = append(favoriteArticleFolderBeforeInsertHooks, favoriteArticleFolderHook)
		favoriteArticleFolderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		favoriteArticleFolderAfterInsertMu.Lock()
		favoriteArticleFolderAfterInsertHooks = append(favoriteArticleFolderAfterInsertHooks, favoriteArticleFolderHook)
		favoriteArticleFolderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		favoriteArticleFolderBeforeUpdateMu.Lock()
		favoriteArticleFolderBeforeUpdateHooks = append(favoriteArticleFolderBeforeUpdateHooks, favoriteArticleFolderHook)
		favoriteArticleFolderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		favoriteArticleFolderAfterUpdateMu.Lock()
		favoriteArticleFolderAfterUpdateHooks = append(favoriteArticleFolderAfterUpdateHooks, favoriteArticleFolderHook)
		favoriteArticleFolderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		favoriteArticleFolderBeforeDeleteMu.Lock()
		favoriteArticleFolderBeforeDeleteHooks = append(favoriteArticleFolderBeforeDeleteHooks, favoriteArticleFolderHook)
		favoriteArticleFolderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		favoriteArticleFolderAfterDeleteMu.Lock()
		favoriteArticleFolderAfterDeleteHooks = append(favoriteArticleFolderAfterDeleteHooks, favoriteArticleFolderHook)
		favoriteArticleFolderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		favoriteArticleFolderBeforeUpsertMu.Lock()
		favoriteArticleFolderBeforeUpsertHooks = append(favoriteArticleFolderBeforeUpsertHooks, favoriteArticleFolderHook)
		favoriteArticleFolderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		favoriteArticleFolderAfterUpsertMu.Lock()
		favoriteArticleFolderAfterUpsertHooks = append(favoriteArticleFolderAfterUpsertHooks, favoriteArticleFolderHook)
		favoriteArticleFolderAfterUpsertMu.Unlock()
	}
}

// One returns a single favoriteArticleFolder record from the query.
func (q favoriteArticleFolderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FavoriteArticleFolder, error) {
	o := &FavoriteArticleFolder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for favorite_article_folders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FavoriteArticleFolder records from the query.
func (q favoriteArticleFolderQuery) All(ctx context.Context, exec boil.ContextExecutor) (FavoriteArticleFolderSlice, error) {
	var o []*FavoriteArticleFolder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to FavoriteArticleFolder slice")
	}

	if len(favoriteArticleFolderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FavoriteArticleFolder records in the query.
func (q favoriteArticleFolderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count favorite_article_folders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q favoriteArticleFolderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if favorite_article_folders exists")
	}

	return count > 0, nil
}

// FavoriteArticles retrieves all the favorite_article's FavoriteArticles with an executor.
func (o *FavoriteArticleFolder) FavoriteArticles(mods ...qm.QueryMod) favoriteArticleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"favorite_articles\".\"favorite_article_folder_id\"=?", o.ID),
	)

	return FavoriteArticles(queryMods...)
}

// LoadFavoriteArticles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (favoriteArticleFolderL) LoadFavoriteArticles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteArticleFolder interface{}, mods queries.Applicator) error {
	var slice []*FavoriteArticleFolder
	var object *FavoriteArticleFolder

	if singular {
		var ok bool
		object, ok = maybeFavoriteArticleFolder.(*FavoriteArticleFolder)
		if !ok {
			object = new(FavoriteArticleFolder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFavoriteArticleFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFavoriteArticleFolder))
			}
		}
	} else {
		s, ok := maybeFavoriteArticleFolder.(*[]*FavoriteArticleFolder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFavoriteArticleFolder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFavoriteArticleFolder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &favoriteArticleFolderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteArticleFolderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`favorite_articles`),
		qm.WhereIn(`favorite_articles.favorite_article_folder_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load favorite_articles")
	}

	var resultSlice []*FavoriteArticle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice favorite_articles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on favorite_articles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorite_articles")
	}

	if len(favoriteArticleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FavoriteArticles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &favoriteArticleR{}
			}
			foreign.R.FavoriteArticleFolder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FavoriteArticleFolderID {
				local.R.FavoriteArticles = append(local.R.FavoriteArticles, foreign)
				if foreign.R == nil {
					foreign.R = &favoriteArticleR{}
				}
				foreign.R.FavoriteArticleFolder = local
				break
			}
		}
	}

	return nil
}

// AddFavoriteArticles adds the given related objects to the existing relationships
// of the favorite_article_folder, optionally inserting them as new records.
// Appends related to o.R.FavoriteArticles.
// Sets related.R.FavoriteArticleFolder appropriately.
func (o *FavoriteArticleFolder) AddFavoriteArticles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FavoriteArticle) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FavoriteArticleFolderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"favorite_articles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"favorite_article_folder_id"}),
				strmangle.WhereClause("\"", "\"", 2, favoriteArticlePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FavoriteArticleFolderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &favoriteArticleFolderR{
			FavoriteArticles: related,
		}
	} else {
		o.R.FavoriteArticles = append(o.R.FavoriteArticles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &favoriteArticleR{
				FavoriteArticleFolder: o,
			}
		} else {
			rel.R.FavoriteArticleFolder = o
		}
	}
	return nil
}

// FavoriteArticleFolders retrieves all the records using an executor.
func FavoriteArticleFolders(mods ...qm.QueryMod) favoriteArticleFolderQuery {
	mods = append(mods, qm.From("\"favorite_article_folders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"favorite_article_folders\".*"})
	}

	return favoriteArticleFolderQuery{q}
}

// FindFavoriteArticleFolder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFavoriteArticleFolder(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FavoriteArticleFolder, error) {
	favoriteArticleFolderObj := &FavoriteArticleFolder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"favorite_article_folders\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, favoriteArticleFolderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from favorite_article_folders")
	}

	if err = favoriteArticleFolderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return favoriteArticleFolderObj, err
	}

	return favoriteArticleFolderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FavoriteArticleFolder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no favorite_article_folders provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(favoriteArticleFolderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	favoriteArticleFolderInsertCacheMut.RLock()
	cache, cached := favoriteArticleFolderInsertCache[key]
	favoriteArticleFolderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			favoriteArticleFolderAllColumns,
			favoriteArticleFolderColumnsWithDefault,
			favoriteArticleFolderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(favoriteArticleFolderType, favoriteArticleFolderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(favoriteArticleFolderType, favoriteArticleFolderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"favorite_article_folders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"favorite_article_folders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into favorite_article_folders")
	}

	if !cached {
		favoriteArticleFolderInsertCacheMut.Lock()
		favoriteArticleFolderInsertCache[key] = cache
		favoriteArticleFolderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FavoriteArticleFolder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FavoriteArticleFolder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	favoriteArticleFolderUpdateCacheMut.RLock()
	cache, cached := favoriteArticleFolderUpdateCache[key]
	favoriteArticleFolderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			favoriteArticleFolderAllColumns,
			favoriteArticleFolderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update favorite_article_folders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"favorite_article_folders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, favoriteArticleFolderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(favoriteArticleFolderType, favoriteArticleFolderMapping, append(wl, favoriteArticleFolderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update favorite_article_folders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for favorite_article_folders")
	}

	if !cached {
		favoriteArticleFolderUpdateCacheMut.Lock()
		favoriteArticleFolderUpdateCache[key] = cache
		favoriteArticleFolderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q favoriteArticleFolderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for favorite_article_folders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for favorite_article_folders")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FavoriteArticleFolderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteArticleFolderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"favorite_article_folders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, favoriteArticleFolderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in favoriteArticleFolder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all favoriteArticleFolder")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FavoriteArticleFolder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no favorite_article_folders provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(favoriteArticleFolderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	favoriteArticleFolderUpsertCacheMut.RLock()
	cache, cached := favoriteArticleFolderUpsertCache[key]
	favoriteArticleFolderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			favoriteArticleFolderAllColumns,
			favoriteArticleFolderColumnsWithDefault,
			favoriteArticleFolderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			favoriteArticleFolderAllColumns,
			favoriteArticleFolderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert favorite_article_folders, could not build update column list")
		}

		ret := strmangle.SetComplement(favoriteArticleFolderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(favoriteArticleFolderPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert favorite_article_folders, could not build conflict column list")
			}

			conflict = make([]string, len(favoriteArticleFolderPrimaryKeyColumns))
			copy(conflict, favoriteArticleFolderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"favorite_article_folders\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(favoriteArticleFolderType, favoriteArticleFolderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(favoriteArticleFolderType, favoriteArticleFolderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert favorite_article_folders")
	}

	if !cached {
		favoriteArticleFolderUpsertCacheMut.Lock()
		favoriteArticleFolderUpsertCache[key] = cache
		favoriteArticleFolderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FavoriteArticleFolder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FavoriteArticleFolder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no FavoriteArticleFolder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), favoriteArticleFolderPrimaryKeyMapping)
	sql := "DELETE FROM \"favorite_article_folders\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from favorite_article_folders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for favorite_article_folders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q favoriteArticleFolderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no favoriteArticleFolderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from favorite_article_folders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for favorite_article_folders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FavoriteArticleFolderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(favoriteArticleFolderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteArticleFolderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"favorite_article_folders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, favoriteArticleFolderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from favoriteArticleFolder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for favorite_article_folders")
	}

	if len(favoriteArticleFolderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FavoriteArticleFolder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFavoriteArticleFolder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FavoriteArticleFolderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FavoriteArticleFolderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteArticleFolderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"favorite_article_folders\".* FROM \"favorite_article_folders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, favoriteArticleFolderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in FavoriteArticleFolderSlice")
	}

	*o = slice

	return nil
}

// FavoriteArticleFolderExists checks if the FavoriteArticleFolder row exists.
func FavoriteArticleFolderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"favorite_article_folders\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if favorite_article_folders exists")
	}

	return exists, nil
}

// Exists checks if the FavoriteArticleFolder row exists.
func (o *FavoriteArticleFolder) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FavoriteArticleFolderExists(ctx, exec, o.ID)
}
