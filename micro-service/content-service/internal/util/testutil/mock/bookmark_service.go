// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/bookmark/bookmark_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	bookmark "github.com/YukiOnishi1129/techpicks/micro-service/content-service/grpc/bookmark"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBookmarkServiceClient is a mock of BookmarkServiceClient interface.
type MockBookmarkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkServiceClientMockRecorder
}

// MockBookmarkServiceClientMockRecorder is the mock recorder for MockBookmarkServiceClient.
type MockBookmarkServiceClientMockRecorder struct {
	mock *MockBookmarkServiceClient
}

// NewMockBookmarkServiceClient creates a new mock instance.
func NewMockBookmarkServiceClient(ctrl *gomock.Controller) *MockBookmarkServiceClient {
	mock := &MockBookmarkServiceClient{ctrl: ctrl}
	mock.recorder = &MockBookmarkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarkServiceClient) EXPECT() *MockBookmarkServiceClientMockRecorder {
	return m.recorder
}

// CreateBookmark mocks base method.
func (m *MockBookmarkServiceClient) CreateBookmark(ctx context.Context, in *bookmark.CreateBookmarkRequest, opts ...grpc.CallOption) (*bookmark.CreateBookmarkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBookmark", varargs...)
	ret0, _ := ret[0].(*bookmark.CreateBookmarkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmark indicates an expected call of CreateBookmark.
func (mr *MockBookmarkServiceClientMockRecorder) CreateBookmark(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockBookmarkServiceClient)(nil).CreateBookmark), varargs...)
}

// CreateBookmarkForUploadArticle mocks base method.
func (m *MockBookmarkServiceClient) CreateBookmarkForUploadArticle(ctx context.Context, in *bookmark.CreateBookmarkForUploadArticleRequest, opts ...grpc.CallOption) (*bookmark.CreateBookmarkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBookmarkForUploadArticle", varargs...)
	ret0, _ := ret[0].(*bookmark.CreateBookmarkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmarkForUploadArticle indicates an expected call of CreateBookmarkForUploadArticle.
func (mr *MockBookmarkServiceClientMockRecorder) CreateBookmarkForUploadArticle(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmarkForUploadArticle", reflect.TypeOf((*MockBookmarkServiceClient)(nil).CreateBookmarkForUploadArticle), varargs...)
}

// DeleteBookmark mocks base method.
func (m *MockBookmarkServiceClient) DeleteBookmark(ctx context.Context, in *bookmark.DeleteBookmarkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBookmark", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBookmark indicates an expected call of DeleteBookmark.
func (mr *MockBookmarkServiceClientMockRecorder) DeleteBookmark(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmark", reflect.TypeOf((*MockBookmarkServiceClient)(nil).DeleteBookmark), varargs...)
}

// GetBookmarkByArticleID mocks base method.
func (m *MockBookmarkServiceClient) GetBookmarkByArticleID(ctx context.Context, in *bookmark.GetBookmarkByArticleIDRequest, opts ...grpc.CallOption) (*bookmark.GetBookmarkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookmarkByArticleID", varargs...)
	ret0, _ := ret[0].(*bookmark.GetBookmarkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarkByArticleID indicates an expected call of GetBookmarkByArticleID.
func (mr *MockBookmarkServiceClientMockRecorder) GetBookmarkByArticleID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarkByArticleID", reflect.TypeOf((*MockBookmarkServiceClient)(nil).GetBookmarkByArticleID), varargs...)
}

// GetBookmarks mocks base method.
func (m *MockBookmarkServiceClient) GetBookmarks(ctx context.Context, in *bookmark.GetBookmarksRequest, opts ...grpc.CallOption) (*bookmark.GetBookmarksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookmarks", varargs...)
	ret0, _ := ret[0].(*bookmark.GetBookmarksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarks indicates an expected call of GetBookmarks.
func (mr *MockBookmarkServiceClientMockRecorder) GetBookmarks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarks", reflect.TypeOf((*MockBookmarkServiceClient)(nil).GetBookmarks), varargs...)
}

// MockBookmarkServiceServer is a mock of BookmarkServiceServer interface.
type MockBookmarkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkServiceServerMockRecorder
}

// MockBookmarkServiceServerMockRecorder is the mock recorder for MockBookmarkServiceServer.
type MockBookmarkServiceServerMockRecorder struct {
	mock *MockBookmarkServiceServer
}

// NewMockBookmarkServiceServer creates a new mock instance.
func NewMockBookmarkServiceServer(ctrl *gomock.Controller) *MockBookmarkServiceServer {
	mock := &MockBookmarkServiceServer{ctrl: ctrl}
	mock.recorder = &MockBookmarkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarkServiceServer) EXPECT() *MockBookmarkServiceServerMockRecorder {
	return m.recorder
}

// CreateBookmark mocks base method.
func (m *MockBookmarkServiceServer) CreateBookmark(arg0 context.Context, arg1 *bookmark.CreateBookmarkRequest) (*bookmark.CreateBookmarkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmark", arg0, arg1)
	ret0, _ := ret[0].(*bookmark.CreateBookmarkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmark indicates an expected call of CreateBookmark.
func (mr *MockBookmarkServiceServerMockRecorder) CreateBookmark(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockBookmarkServiceServer)(nil).CreateBookmark), arg0, arg1)
}

// CreateBookmarkForUploadArticle mocks base method.
func (m *MockBookmarkServiceServer) CreateBookmarkForUploadArticle(arg0 context.Context, arg1 *bookmark.CreateBookmarkForUploadArticleRequest) (*bookmark.CreateBookmarkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmarkForUploadArticle", arg0, arg1)
	ret0, _ := ret[0].(*bookmark.CreateBookmarkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookmarkForUploadArticle indicates an expected call of CreateBookmarkForUploadArticle.
func (mr *MockBookmarkServiceServerMockRecorder) CreateBookmarkForUploadArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmarkForUploadArticle", reflect.TypeOf((*MockBookmarkServiceServer)(nil).CreateBookmarkForUploadArticle), arg0, arg1)
}

// DeleteBookmark mocks base method.
func (m *MockBookmarkServiceServer) DeleteBookmark(arg0 context.Context, arg1 *bookmark.DeleteBookmarkRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookmark", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBookmark indicates an expected call of DeleteBookmark.
func (mr *MockBookmarkServiceServerMockRecorder) DeleteBookmark(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmark", reflect.TypeOf((*MockBookmarkServiceServer)(nil).DeleteBookmark), arg0, arg1)
}

// GetBookmarkByArticleID mocks base method.
func (m *MockBookmarkServiceServer) GetBookmarkByArticleID(arg0 context.Context, arg1 *bookmark.GetBookmarkByArticleIDRequest) (*bookmark.GetBookmarkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarkByArticleID", arg0, arg1)
	ret0, _ := ret[0].(*bookmark.GetBookmarkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarkByArticleID indicates an expected call of GetBookmarkByArticleID.
func (mr *MockBookmarkServiceServerMockRecorder) GetBookmarkByArticleID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarkByArticleID", reflect.TypeOf((*MockBookmarkServiceServer)(nil).GetBookmarkByArticleID), arg0, arg1)
}

// GetBookmarks mocks base method.
func (m *MockBookmarkServiceServer) GetBookmarks(arg0 context.Context, arg1 *bookmark.GetBookmarksRequest) (*bookmark.GetBookmarksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarks", arg0, arg1)
	ret0, _ := ret[0].(*bookmark.GetBookmarksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarks indicates an expected call of GetBookmarks.
func (mr *MockBookmarkServiceServerMockRecorder) GetBookmarks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarks", reflect.TypeOf((*MockBookmarkServiceServer)(nil).GetBookmarks), arg0, arg1)
}

// MockUnsafeBookmarkServiceServer is a mock of UnsafeBookmarkServiceServer interface.
type MockUnsafeBookmarkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBookmarkServiceServerMockRecorder
}

// MockUnsafeBookmarkServiceServerMockRecorder is the mock recorder for MockUnsafeBookmarkServiceServer.
type MockUnsafeBookmarkServiceServerMockRecorder struct {
	mock *MockUnsafeBookmarkServiceServer
}

// NewMockUnsafeBookmarkServiceServer creates a new mock instance.
func NewMockUnsafeBookmarkServiceServer(ctrl *gomock.Controller) *MockUnsafeBookmarkServiceServer {
	mock := &MockUnsafeBookmarkServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBookmarkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBookmarkServiceServer) EXPECT() *MockUnsafeBookmarkServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBookmarkServiceServer mocks base method.
func (m *MockUnsafeBookmarkServiceServer) mustEmbedUnimplementedBookmarkServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookmarkServiceServer")
}

// mustEmbedUnimplementedBookmarkServiceServer indicates an expected call of mustEmbedUnimplementedBookmarkServiceServer.
func (mr *MockUnsafeBookmarkServiceServerMockRecorder) mustEmbedUnimplementedBookmarkServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookmarkServiceServer", reflect.TypeOf((*MockUnsafeBookmarkServiceServer)(nil).mustEmbedUnimplementedBookmarkServiceServer))
}
