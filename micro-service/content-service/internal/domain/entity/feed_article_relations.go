// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FeedArticleRelation is an object representing the database table.
type FeedArticleRelation struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	FeedID    string    `boil:"feed_id" json:"feed_id" toml:"feed_id" yaml:"feed_id"`
	ArticleID string    `boil:"article_id" json:"article_id" toml:"article_id" yaml:"article_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *feedArticleRelationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L feedArticleRelationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FeedArticleRelationColumns = struct {
	ID        string
	FeedID    string
	ArticleID string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	FeedID:    "feed_id",
	ArticleID: "article_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var FeedArticleRelationTableColumns = struct {
	ID        string
	FeedID    string
	ArticleID string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "feed_article_relations.id",
	FeedID:    "feed_article_relations.feed_id",
	ArticleID: "feed_article_relations.article_id",
	CreatedAt: "feed_article_relations.created_at",
	UpdatedAt: "feed_article_relations.updated_at",
}

// Generated where

var FeedArticleRelationWhere = struct {
	ID        whereHelperstring
	FeedID    whereHelperstring
	ArticleID whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"feed_article_relations\".\"id\""},
	FeedID:    whereHelperstring{field: "\"feed_article_relations\".\"feed_id\""},
	ArticleID: whereHelperstring{field: "\"feed_article_relations\".\"article_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"feed_article_relations\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"feed_article_relations\".\"updated_at\""},
}

// FeedArticleRelationRels is where relationship names are stored.
var FeedArticleRelationRels = struct {
	Article string
	Feed    string
}{
	Article: "Article",
	Feed:    "Feed",
}

// feedArticleRelationR is where relationships are stored.
type feedArticleRelationR struct {
	Article *Article `boil:"Article" json:"Article" toml:"Article" yaml:"Article"`
	Feed    *Feed    `boil:"Feed" json:"Feed" toml:"Feed" yaml:"Feed"`
}

// NewStruct creates a new relationship struct
func (*feedArticleRelationR) NewStruct() *feedArticleRelationR {
	return &feedArticleRelationR{}
}

func (r *feedArticleRelationR) GetArticle() *Article {
	if r == nil {
		return nil
	}
	return r.Article
}

func (r *feedArticleRelationR) GetFeed() *Feed {
	if r == nil {
		return nil
	}
	return r.Feed
}

// feedArticleRelationL is where Load methods for each relationship are stored.
type feedArticleRelationL struct{}

var (
	feedArticleRelationAllColumns            = []string{"id", "feed_id", "article_id", "created_at", "updated_at"}
	feedArticleRelationColumnsWithoutDefault = []string{"feed_id", "article_id"}
	feedArticleRelationColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	feedArticleRelationPrimaryKeyColumns     = []string{"id"}
	feedArticleRelationGeneratedColumns      = []string{}
)

type (
	// FeedArticleRelationSlice is an alias for a slice of pointers to FeedArticleRelation.
	// This should almost always be used instead of []FeedArticleRelation.
	FeedArticleRelationSlice []*FeedArticleRelation
	// FeedArticleRelationHook is the signature for custom FeedArticleRelation hook methods
	FeedArticleRelationHook func(context.Context, boil.ContextExecutor, *FeedArticleRelation) error

	feedArticleRelationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	feedArticleRelationType                 = reflect.TypeOf(&FeedArticleRelation{})
	feedArticleRelationMapping              = queries.MakeStructMapping(feedArticleRelationType)
	feedArticleRelationPrimaryKeyMapping, _ = queries.BindMapping(feedArticleRelationType, feedArticleRelationMapping, feedArticleRelationPrimaryKeyColumns)
	feedArticleRelationInsertCacheMut       sync.RWMutex
	feedArticleRelationInsertCache          = make(map[string]insertCache)
	feedArticleRelationUpdateCacheMut       sync.RWMutex
	feedArticleRelationUpdateCache          = make(map[string]updateCache)
	feedArticleRelationUpsertCacheMut       sync.RWMutex
	feedArticleRelationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var feedArticleRelationAfterSelectMu sync.Mutex
var feedArticleRelationAfterSelectHooks []FeedArticleRelationHook

var feedArticleRelationBeforeInsertMu sync.Mutex
var feedArticleRelationBeforeInsertHooks []FeedArticleRelationHook
var feedArticleRelationAfterInsertMu sync.Mutex
var feedArticleRelationAfterInsertHooks []FeedArticleRelationHook

var feedArticleRelationBeforeUpdateMu sync.Mutex
var feedArticleRelationBeforeUpdateHooks []FeedArticleRelationHook
var feedArticleRelationAfterUpdateMu sync.Mutex
var feedArticleRelationAfterUpdateHooks []FeedArticleRelationHook

var feedArticleRelationBeforeDeleteMu sync.Mutex
var feedArticleRelationBeforeDeleteHooks []FeedArticleRelationHook
var feedArticleRelationAfterDeleteMu sync.Mutex
var feedArticleRelationAfterDeleteHooks []FeedArticleRelationHook

var feedArticleRelationBeforeUpsertMu sync.Mutex
var feedArticleRelationBeforeUpsertHooks []FeedArticleRelationHook
var feedArticleRelationAfterUpsertMu sync.Mutex
var feedArticleRelationAfterUpsertHooks []FeedArticleRelationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FeedArticleRelation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FeedArticleRelation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FeedArticleRelation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FeedArticleRelation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FeedArticleRelation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FeedArticleRelation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FeedArticleRelation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FeedArticleRelation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FeedArticleRelation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedArticleRelationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFeedArticleRelationHook registers your hook function for all future operations.
func AddFeedArticleRelationHook(hookPoint boil.HookPoint, feedArticleRelationHook FeedArticleRelationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		feedArticleRelationAfterSelectMu.Lock()
		feedArticleRelationAfterSelectHooks = append(feedArticleRelationAfterSelectHooks, feedArticleRelationHook)
		feedArticleRelationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		feedArticleRelationBeforeInsertMu.Lock()
		feedArticleRelationBeforeInsertHooks = append(feedArticleRelationBeforeInsertHooks, feedArticleRelationHook)
		feedArticleRelationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		feedArticleRelationAfterInsertMu.Lock()
		feedArticleRelationAfterInsertHooks = append(feedArticleRelationAfterInsertHooks, feedArticleRelationHook)
		feedArticleRelationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		feedArticleRelationBeforeUpdateMu.Lock()
		feedArticleRelationBeforeUpdateHooks = append(feedArticleRelationBeforeUpdateHooks, feedArticleRelationHook)
		feedArticleRelationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		feedArticleRelationAfterUpdateMu.Lock()
		feedArticleRelationAfterUpdateHooks = append(feedArticleRelationAfterUpdateHooks, feedArticleRelationHook)
		feedArticleRelationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		feedArticleRelationBeforeDeleteMu.Lock()
		feedArticleRelationBeforeDeleteHooks = append(feedArticleRelationBeforeDeleteHooks, feedArticleRelationHook)
		feedArticleRelationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		feedArticleRelationAfterDeleteMu.Lock()
		feedArticleRelationAfterDeleteHooks = append(feedArticleRelationAfterDeleteHooks, feedArticleRelationHook)
		feedArticleRelationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		feedArticleRelationBeforeUpsertMu.Lock()
		feedArticleRelationBeforeUpsertHooks = append(feedArticleRelationBeforeUpsertHooks, feedArticleRelationHook)
		feedArticleRelationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		feedArticleRelationAfterUpsertMu.Lock()
		feedArticleRelationAfterUpsertHooks = append(feedArticleRelationAfterUpsertHooks, feedArticleRelationHook)
		feedArticleRelationAfterUpsertMu.Unlock()
	}
}

// One returns a single feedArticleRelation record from the query.
func (q feedArticleRelationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FeedArticleRelation, error) {
	o := &FeedArticleRelation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for feed_article_relations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FeedArticleRelation records from the query.
func (q feedArticleRelationQuery) All(ctx context.Context, exec boil.ContextExecutor) (FeedArticleRelationSlice, error) {
	var o []*FeedArticleRelation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to FeedArticleRelation slice")
	}

	if len(feedArticleRelationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FeedArticleRelation records in the query.
func (q feedArticleRelationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count feed_article_relations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q feedArticleRelationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if feed_article_relations exists")
	}

	return count > 0, nil
}

// Article pointed to by the foreign key.
func (o *FeedArticleRelation) Article(mods ...qm.QueryMod) articleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArticleID),
	}

	queryMods = append(queryMods, mods...)

	return Articles(queryMods...)
}

// Feed pointed to by the foreign key.
func (o *FeedArticleRelation) Feed(mods ...qm.QueryMod) feedQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FeedID),
	}

	queryMods = append(queryMods, mods...)

	return Feeds(queryMods...)
}

// LoadArticle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (feedArticleRelationL) LoadArticle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFeedArticleRelation interface{}, mods queries.Applicator) error {
	var slice []*FeedArticleRelation
	var object *FeedArticleRelation

	if singular {
		var ok bool
		object, ok = maybeFeedArticleRelation.(*FeedArticleRelation)
		if !ok {
			object = new(FeedArticleRelation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFeedArticleRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFeedArticleRelation))
			}
		}
	} else {
		s, ok := maybeFeedArticleRelation.(*[]*FeedArticleRelation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFeedArticleRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFeedArticleRelation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &feedArticleRelationR{}
		}
		args[object.ArticleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &feedArticleRelationR{}
			}

			args[obj.ArticleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`articles`),
		qm.WhereIn(`articles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Article")
	}

	var resultSlice []*Article
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Article")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for articles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for articles")
	}

	if len(articleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Article = foreign
		if foreign.R == nil {
			foreign.R = &articleR{}
		}
		foreign.R.FeedArticleRelations = append(foreign.R.FeedArticleRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArticleID == foreign.ID {
				local.R.Article = foreign
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.FeedArticleRelations = append(foreign.R.FeedArticleRelations, local)
				break
			}
		}
	}

	return nil
}

// LoadFeed allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (feedArticleRelationL) LoadFeed(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFeedArticleRelation interface{}, mods queries.Applicator) error {
	var slice []*FeedArticleRelation
	var object *FeedArticleRelation

	if singular {
		var ok bool
		object, ok = maybeFeedArticleRelation.(*FeedArticleRelation)
		if !ok {
			object = new(FeedArticleRelation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFeedArticleRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFeedArticleRelation))
			}
		}
	} else {
		s, ok := maybeFeedArticleRelation.(*[]*FeedArticleRelation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFeedArticleRelation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFeedArticleRelation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &feedArticleRelationR{}
		}
		args[object.FeedID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &feedArticleRelationR{}
			}

			args[obj.FeedID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`feeds`),
		qm.WhereIn(`feeds.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Feed")
	}

	var resultSlice []*Feed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Feed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for feeds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for feeds")
	}

	if len(feedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Feed = foreign
		if foreign.R == nil {
			foreign.R = &feedR{}
		}
		foreign.R.FeedArticleRelations = append(foreign.R.FeedArticleRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FeedID == foreign.ID {
				local.R.Feed = foreign
				if foreign.R == nil {
					foreign.R = &feedR{}
				}
				foreign.R.FeedArticleRelations = append(foreign.R.FeedArticleRelations, local)
				break
			}
		}
	}

	return nil
}

// SetArticle of the feedArticleRelation to the related item.
// Sets o.R.Article to related.
// Adds o to related.R.FeedArticleRelations.
func (o *FeedArticleRelation) SetArticle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Article) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"feed_article_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"article_id"}),
		strmangle.WhereClause("\"", "\"", 2, feedArticleRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArticleID = related.ID
	if o.R == nil {
		o.R = &feedArticleRelationR{
			Article: related,
		}
	} else {
		o.R.Article = related
	}

	if related.R == nil {
		related.R = &articleR{
			FeedArticleRelations: FeedArticleRelationSlice{o},
		}
	} else {
		related.R.FeedArticleRelations = append(related.R.FeedArticleRelations, o)
	}

	return nil
}

// SetFeed of the feedArticleRelation to the related item.
// Sets o.R.Feed to related.
// Adds o to related.R.FeedArticleRelations.
func (o *FeedArticleRelation) SetFeed(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Feed) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"feed_article_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"feed_id"}),
		strmangle.WhereClause("\"", "\"", 2, feedArticleRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FeedID = related.ID
	if o.R == nil {
		o.R = &feedArticleRelationR{
			Feed: related,
		}
	} else {
		o.R.Feed = related
	}

	if related.R == nil {
		related.R = &feedR{
			FeedArticleRelations: FeedArticleRelationSlice{o},
		}
	} else {
		related.R.FeedArticleRelations = append(related.R.FeedArticleRelations, o)
	}

	return nil
}

// FeedArticleRelations retrieves all the records using an executor.
func FeedArticleRelations(mods ...qm.QueryMod) feedArticleRelationQuery {
	mods = append(mods, qm.From("\"feed_article_relations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"feed_article_relations\".*"})
	}

	return feedArticleRelationQuery{q}
}

// FindFeedArticleRelation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFeedArticleRelation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FeedArticleRelation, error) {
	feedArticleRelationObj := &FeedArticleRelation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"feed_article_relations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, feedArticleRelationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from feed_article_relations")
	}

	if err = feedArticleRelationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return feedArticleRelationObj, err
	}

	return feedArticleRelationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FeedArticleRelation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no feed_article_relations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(feedArticleRelationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	feedArticleRelationInsertCacheMut.RLock()
	cache, cached := feedArticleRelationInsertCache[key]
	feedArticleRelationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			feedArticleRelationAllColumns,
			feedArticleRelationColumnsWithDefault,
			feedArticleRelationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(feedArticleRelationType, feedArticleRelationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(feedArticleRelationType, feedArticleRelationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"feed_article_relations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"feed_article_relations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into feed_article_relations")
	}

	if !cached {
		feedArticleRelationInsertCacheMut.Lock()
		feedArticleRelationInsertCache[key] = cache
		feedArticleRelationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FeedArticleRelation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FeedArticleRelation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	feedArticleRelationUpdateCacheMut.RLock()
	cache, cached := feedArticleRelationUpdateCache[key]
	feedArticleRelationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			feedArticleRelationAllColumns,
			feedArticleRelationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update feed_article_relations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"feed_article_relations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, feedArticleRelationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(feedArticleRelationType, feedArticleRelationMapping, append(wl, feedArticleRelationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update feed_article_relations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for feed_article_relations")
	}

	if !cached {
		feedArticleRelationUpdateCacheMut.Lock()
		feedArticleRelationUpdateCache[key] = cache
		feedArticleRelationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q feedArticleRelationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for feed_article_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for feed_article_relations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FeedArticleRelationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedArticleRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"feed_article_relations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, feedArticleRelationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in feedArticleRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all feedArticleRelation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FeedArticleRelation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no feed_article_relations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(feedArticleRelationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	feedArticleRelationUpsertCacheMut.RLock()
	cache, cached := feedArticleRelationUpsertCache[key]
	feedArticleRelationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			feedArticleRelationAllColumns,
			feedArticleRelationColumnsWithDefault,
			feedArticleRelationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			feedArticleRelationAllColumns,
			feedArticleRelationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert feed_article_relations, could not build update column list")
		}

		ret := strmangle.SetComplement(feedArticleRelationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(feedArticleRelationPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert feed_article_relations, could not build conflict column list")
			}

			conflict = make([]string, len(feedArticleRelationPrimaryKeyColumns))
			copy(conflict, feedArticleRelationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"feed_article_relations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(feedArticleRelationType, feedArticleRelationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(feedArticleRelationType, feedArticleRelationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert feed_article_relations")
	}

	if !cached {
		feedArticleRelationUpsertCacheMut.Lock()
		feedArticleRelationUpsertCache[key] = cache
		feedArticleRelationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FeedArticleRelation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FeedArticleRelation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no FeedArticleRelation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), feedArticleRelationPrimaryKeyMapping)
	sql := "DELETE FROM \"feed_article_relations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from feed_article_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for feed_article_relations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q feedArticleRelationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no feedArticleRelationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from feed_article_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for feed_article_relations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FeedArticleRelationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(feedArticleRelationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedArticleRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"feed_article_relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, feedArticleRelationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from feedArticleRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for feed_article_relations")
	}

	if len(feedArticleRelationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FeedArticleRelation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFeedArticleRelation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FeedArticleRelationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FeedArticleRelationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedArticleRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"feed_article_relations\".* FROM \"feed_article_relations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, feedArticleRelationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in FeedArticleRelationSlice")
	}

	*o = slice

	return nil
}

// FeedArticleRelationExists checks if the FeedArticleRelation row exists.
func FeedArticleRelationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"feed_article_relations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if feed_article_relations exists")
	}

	return exists, nil
}

// Exists checks if the FeedArticleRelation row exists.
func (o *FeedArticleRelation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FeedArticleRelationExists(ctx, exec, o.ID)
}
