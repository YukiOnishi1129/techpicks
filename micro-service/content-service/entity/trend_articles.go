// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TrendArticle is an object representing the database table.
type TrendArticle struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ArticleID  string    `boil:"article_id" json:"article_id" toml:"article_id" yaml:"article_id"`
	PlatformID string    `boil:"platform_id" json:"platform_id" toml:"platform_id" yaml:"platform_id"`
	LikeCount  int       `boil:"like_count" json:"like_count" toml:"like_count" yaml:"like_count"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *trendArticleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trendArticleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrendArticleColumns = struct {
	ID         string
	ArticleID  string
	PlatformID string
	LikeCount  string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	ArticleID:  "article_id",
	PlatformID: "platform_id",
	LikeCount:  "like_count",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var TrendArticleTableColumns = struct {
	ID         string
	ArticleID  string
	PlatformID string
	LikeCount  string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "trend_articles.id",
	ArticleID:  "trend_articles.article_id",
	PlatformID: "trend_articles.platform_id",
	LikeCount:  "trend_articles.like_count",
	CreatedAt:  "trend_articles.created_at",
	UpdatedAt:  "trend_articles.updated_at",
}

// Generated where

var TrendArticleWhere = struct {
	ID         whereHelperstring
	ArticleID  whereHelperstring
	PlatformID whereHelperstring
	LikeCount  whereHelperint
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"trend_articles\".\"id\""},
	ArticleID:  whereHelperstring{field: "\"trend_articles\".\"article_id\""},
	PlatformID: whereHelperstring{field: "\"trend_articles\".\"platform_id\""},
	LikeCount:  whereHelperint{field: "\"trend_articles\".\"like_count\""},
	CreatedAt:  whereHelpertime_Time{field: "\"trend_articles\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"trend_articles\".\"updated_at\""},
}

// TrendArticleRels is where relationship names are stored.
var TrendArticleRels = struct {
	Article  string
	Platform string
}{
	Article:  "Article",
	Platform: "Platform",
}

// trendArticleR is where relationships are stored.
type trendArticleR struct {
	Article  *Article  `boil:"Article" json:"Article" toml:"Article" yaml:"Article"`
	Platform *Platform `boil:"Platform" json:"Platform" toml:"Platform" yaml:"Platform"`
}

// NewStruct creates a new relationship struct
func (*trendArticleR) NewStruct() *trendArticleR {
	return &trendArticleR{}
}

func (r *trendArticleR) GetArticle() *Article {
	if r == nil {
		return nil
	}
	return r.Article
}

func (r *trendArticleR) GetPlatform() *Platform {
	if r == nil {
		return nil
	}
	return r.Platform
}

// trendArticleL is where Load methods for each relationship are stored.
type trendArticleL struct{}

var (
	trendArticleAllColumns            = []string{"id", "article_id", "platform_id", "like_count", "created_at", "updated_at"}
	trendArticleColumnsWithoutDefault = []string{"article_id", "platform_id"}
	trendArticleColumnsWithDefault    = []string{"id", "like_count", "created_at", "updated_at"}
	trendArticlePrimaryKeyColumns     = []string{"id", "article_id", "platform_id"}
	trendArticleGeneratedColumns      = []string{}
)

type (
	// TrendArticleSlice is an alias for a slice of pointers to TrendArticle.
	// This should almost always be used instead of []TrendArticle.
	TrendArticleSlice []*TrendArticle
	// TrendArticleHook is the signature for custom TrendArticle hook methods
	TrendArticleHook func(context.Context, boil.ContextExecutor, *TrendArticle) error

	trendArticleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trendArticleType                 = reflect.TypeOf(&TrendArticle{})
	trendArticleMapping              = queries.MakeStructMapping(trendArticleType)
	trendArticlePrimaryKeyMapping, _ = queries.BindMapping(trendArticleType, trendArticleMapping, trendArticlePrimaryKeyColumns)
	trendArticleInsertCacheMut       sync.RWMutex
	trendArticleInsertCache          = make(map[string]insertCache)
	trendArticleUpdateCacheMut       sync.RWMutex
	trendArticleUpdateCache          = make(map[string]updateCache)
	trendArticleUpsertCacheMut       sync.RWMutex
	trendArticleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trendArticleAfterSelectMu sync.Mutex
var trendArticleAfterSelectHooks []TrendArticleHook

var trendArticleBeforeInsertMu sync.Mutex
var trendArticleBeforeInsertHooks []TrendArticleHook
var trendArticleAfterInsertMu sync.Mutex
var trendArticleAfterInsertHooks []TrendArticleHook

var trendArticleBeforeUpdateMu sync.Mutex
var trendArticleBeforeUpdateHooks []TrendArticleHook
var trendArticleAfterUpdateMu sync.Mutex
var trendArticleAfterUpdateHooks []TrendArticleHook

var trendArticleBeforeDeleteMu sync.Mutex
var trendArticleBeforeDeleteHooks []TrendArticleHook
var trendArticleAfterDeleteMu sync.Mutex
var trendArticleAfterDeleteHooks []TrendArticleHook

var trendArticleBeforeUpsertMu sync.Mutex
var trendArticleBeforeUpsertHooks []TrendArticleHook
var trendArticleAfterUpsertMu sync.Mutex
var trendArticleAfterUpsertHooks []TrendArticleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrendArticle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrendArticle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrendArticle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrendArticle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrendArticle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrendArticle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrendArticle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrendArticle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrendArticle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trendArticleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrendArticleHook registers your hook function for all future operations.
func AddTrendArticleHook(hookPoint boil.HookPoint, trendArticleHook TrendArticleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		trendArticleAfterSelectMu.Lock()
		trendArticleAfterSelectHooks = append(trendArticleAfterSelectHooks, trendArticleHook)
		trendArticleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		trendArticleBeforeInsertMu.Lock()
		trendArticleBeforeInsertHooks = append(trendArticleBeforeInsertHooks, trendArticleHook)
		trendArticleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		trendArticleAfterInsertMu.Lock()
		trendArticleAfterInsertHooks = append(trendArticleAfterInsertHooks, trendArticleHook)
		trendArticleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		trendArticleBeforeUpdateMu.Lock()
		trendArticleBeforeUpdateHooks = append(trendArticleBeforeUpdateHooks, trendArticleHook)
		trendArticleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		trendArticleAfterUpdateMu.Lock()
		trendArticleAfterUpdateHooks = append(trendArticleAfterUpdateHooks, trendArticleHook)
		trendArticleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		trendArticleBeforeDeleteMu.Lock()
		trendArticleBeforeDeleteHooks = append(trendArticleBeforeDeleteHooks, trendArticleHook)
		trendArticleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		trendArticleAfterDeleteMu.Lock()
		trendArticleAfterDeleteHooks = append(trendArticleAfterDeleteHooks, trendArticleHook)
		trendArticleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		trendArticleBeforeUpsertMu.Lock()
		trendArticleBeforeUpsertHooks = append(trendArticleBeforeUpsertHooks, trendArticleHook)
		trendArticleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		trendArticleAfterUpsertMu.Lock()
		trendArticleAfterUpsertHooks = append(trendArticleAfterUpsertHooks, trendArticleHook)
		trendArticleAfterUpsertMu.Unlock()
	}
}

// One returns a single trendArticle record from the query.
func (q trendArticleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrendArticle, error) {
	o := &TrendArticle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for trend_articles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrendArticle records from the query.
func (q trendArticleQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrendArticleSlice, error) {
	var o []*TrendArticle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to TrendArticle slice")
	}

	if len(trendArticleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrendArticle records in the query.
func (q trendArticleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count trend_articles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trendArticleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if trend_articles exists")
	}

	return count > 0, nil
}

// Article pointed to by the foreign key.
func (o *TrendArticle) Article(mods ...qm.QueryMod) articleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArticleID),
	}

	queryMods = append(queryMods, mods...)

	return Articles(queryMods...)
}

// Platform pointed to by the foreign key.
func (o *TrendArticle) Platform(mods ...qm.QueryMod) platformQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlatformID),
	}

	queryMods = append(queryMods, mods...)

	return Platforms(queryMods...)
}

// LoadArticle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trendArticleL) LoadArticle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrendArticle interface{}, mods queries.Applicator) error {
	var slice []*TrendArticle
	var object *TrendArticle

	if singular {
		var ok bool
		object, ok = maybeTrendArticle.(*TrendArticle)
		if !ok {
			object = new(TrendArticle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrendArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrendArticle))
			}
		}
	} else {
		s, ok := maybeTrendArticle.(*[]*TrendArticle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrendArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrendArticle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trendArticleR{}
		}
		args[object.ArticleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trendArticleR{}
			}

			args[obj.ArticleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`articles`),
		qm.WhereIn(`articles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Article")
	}

	var resultSlice []*Article
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Article")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for articles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for articles")
	}

	if len(articleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Article = foreign
		if foreign.R == nil {
			foreign.R = &articleR{}
		}
		foreign.R.TrendArticles = append(foreign.R.TrendArticles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArticleID == foreign.ID {
				local.R.Article = foreign
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.TrendArticles = append(foreign.R.TrendArticles, local)
				break
			}
		}
	}

	return nil
}

// LoadPlatform allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trendArticleL) LoadPlatform(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrendArticle interface{}, mods queries.Applicator) error {
	var slice []*TrendArticle
	var object *TrendArticle

	if singular {
		var ok bool
		object, ok = maybeTrendArticle.(*TrendArticle)
		if !ok {
			object = new(TrendArticle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrendArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrendArticle))
			}
		}
	} else {
		s, ok := maybeTrendArticle.(*[]*TrendArticle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrendArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrendArticle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &trendArticleR{}
		}
		args[object.PlatformID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trendArticleR{}
			}

			args[obj.PlatformID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`platforms`),
		qm.WhereIn(`platforms.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Platform")
	}

	var resultSlice []*Platform
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Platform")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for platforms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for platforms")
	}

	if len(platformAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Platform = foreign
		if foreign.R == nil {
			foreign.R = &platformR{}
		}
		foreign.R.TrendArticles = append(foreign.R.TrendArticles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlatformID == foreign.ID {
				local.R.Platform = foreign
				if foreign.R == nil {
					foreign.R = &platformR{}
				}
				foreign.R.TrendArticles = append(foreign.R.TrendArticles, local)
				break
			}
		}
	}

	return nil
}

// SetArticle of the trendArticle to the related item.
// Sets o.R.Article to related.
// Adds o to related.R.TrendArticles.
func (o *TrendArticle) SetArticle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Article) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trend_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"article_id"}),
		strmangle.WhereClause("\"", "\"", 2, trendArticlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID, o.ArticleID, o.PlatformID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArticleID = related.ID
	if o.R == nil {
		o.R = &trendArticleR{
			Article: related,
		}
	} else {
		o.R.Article = related
	}

	if related.R == nil {
		related.R = &articleR{
			TrendArticles: TrendArticleSlice{o},
		}
	} else {
		related.R.TrendArticles = append(related.R.TrendArticles, o)
	}

	return nil
}

// SetPlatform of the trendArticle to the related item.
// Sets o.R.Platform to related.
// Adds o to related.R.TrendArticles.
func (o *TrendArticle) SetPlatform(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Platform) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trend_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"platform_id"}),
		strmangle.WhereClause("\"", "\"", 2, trendArticlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID, o.ArticleID, o.PlatformID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlatformID = related.ID
	if o.R == nil {
		o.R = &trendArticleR{
			Platform: related,
		}
	} else {
		o.R.Platform = related
	}

	if related.R == nil {
		related.R = &platformR{
			TrendArticles: TrendArticleSlice{o},
		}
	} else {
		related.R.TrendArticles = append(related.R.TrendArticles, o)
	}

	return nil
}

// TrendArticles retrieves all the records using an executor.
func TrendArticles(mods ...qm.QueryMod) trendArticleQuery {
	mods = append(mods, qm.From("\"trend_articles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"trend_articles\".*"})
	}

	return trendArticleQuery{q}
}

// FindTrendArticle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrendArticle(ctx context.Context, exec boil.ContextExecutor, iD string, articleID string, platformID string, selectCols ...string) (*TrendArticle, error) {
	trendArticleObj := &TrendArticle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trend_articles\" where \"id\"=$1 AND \"article_id\"=$2 AND \"platform_id\"=$3", sel,
	)

	q := queries.Raw(query, iD, articleID, platformID)

	err := q.Bind(ctx, exec, trendArticleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from trend_articles")
	}

	if err = trendArticleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return trendArticleObj, err
	}

	return trendArticleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrendArticle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no trend_articles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trendArticleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trendArticleInsertCacheMut.RLock()
	cache, cached := trendArticleInsertCache[key]
	trendArticleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trendArticleAllColumns,
			trendArticleColumnsWithDefault,
			trendArticleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trendArticleType, trendArticleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trendArticleType, trendArticleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trend_articles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trend_articles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into trend_articles")
	}

	if !cached {
		trendArticleInsertCacheMut.Lock()
		trendArticleInsertCache[key] = cache
		trendArticleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrendArticle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrendArticle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trendArticleUpdateCacheMut.RLock()
	cache, cached := trendArticleUpdateCache[key]
	trendArticleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trendArticleAllColumns,
			trendArticlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update trend_articles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trend_articles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trendArticlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trendArticleType, trendArticleMapping, append(wl, trendArticlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update trend_articles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for trend_articles")
	}

	if !cached {
		trendArticleUpdateCacheMut.Lock()
		trendArticleUpdateCache[key] = cache
		trendArticleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trendArticleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for trend_articles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for trend_articles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrendArticleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trendArticlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trend_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trendArticlePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in trendArticle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all trendArticle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrendArticle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no trend_articles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trendArticleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trendArticleUpsertCacheMut.RLock()
	cache, cached := trendArticleUpsertCache[key]
	trendArticleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			trendArticleAllColumns,
			trendArticleColumnsWithDefault,
			trendArticleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			trendArticleAllColumns,
			trendArticlePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert trend_articles, could not build update column list")
		}

		ret := strmangle.SetComplement(trendArticleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(trendArticlePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert trend_articles, could not build conflict column list")
			}

			conflict = make([]string, len(trendArticlePrimaryKeyColumns))
			copy(conflict, trendArticlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trend_articles\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(trendArticleType, trendArticleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trendArticleType, trendArticleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert trend_articles")
	}

	if !cached {
		trendArticleUpsertCacheMut.Lock()
		trendArticleUpsertCache[key] = cache
		trendArticleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrendArticle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrendArticle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no TrendArticle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trendArticlePrimaryKeyMapping)
	sql := "DELETE FROM \"trend_articles\" WHERE \"id\"=$1 AND \"article_id\"=$2 AND \"platform_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from trend_articles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for trend_articles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trendArticleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no trendArticleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from trend_articles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for trend_articles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrendArticleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trendArticleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trendArticlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trend_articles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trendArticlePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from trendArticle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for trend_articles")
	}

	if len(trendArticleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrendArticle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrendArticle(ctx, exec, o.ID, o.ArticleID, o.PlatformID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrendArticleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrendArticleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trendArticlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trend_articles\".* FROM \"trend_articles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trendArticlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in TrendArticleSlice")
	}

	*o = slice

	return nil
}

// TrendArticleExists checks if the TrendArticle row exists.
func TrendArticleExists(ctx context.Context, exec boil.ContextExecutor, iD string, articleID string, platformID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trend_articles\" where \"id\"=$1 AND \"article_id\"=$2 AND \"platform_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, articleID, platformID)
	}
	row := exec.QueryRowContext(ctx, sql, iD, articleID, platformID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if trend_articles exists")
	}

	return exists, nil
}

// Exists checks if the TrendArticle row exists.
func (o *TrendArticle) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TrendArticleExists(ctx, exec, o.ID, o.ArticleID, o.PlatformID)
}
