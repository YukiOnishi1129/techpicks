// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FavoriteArticle is an object representing the database table.
type FavoriteArticle struct {
	ID                      string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID                  string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	FavoriteArticleFolderID string      `boil:"favorite_article_folder_id" json:"favorite_article_folder_id" toml:"favorite_article_folder_id" yaml:"favorite_article_folder_id"`
	PlatformID              null.String `boil:"platform_id" json:"platform_id,omitempty" toml:"platform_id" yaml:"platform_id,omitempty"`
	ArticleID               string      `boil:"article_id" json:"article_id" toml:"article_id" yaml:"article_id"`
	Title                   string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description             string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	ArticleURL              string      `boil:"article_url" json:"article_url" toml:"article_url" yaml:"article_url"`
	PublishedAt             null.Time   `boil:"published_at" json:"published_at,omitempty" toml:"published_at" yaml:"published_at,omitempty"`
	AuthorName              null.String `boil:"author_name" json:"author_name,omitempty" toml:"author_name" yaml:"author_name,omitempty"`
	Tags                    null.String `boil:"tags" json:"tags,omitempty" toml:"tags" yaml:"tags,omitempty"`
	ThumbnailURL            string      `boil:"thumbnail_url" json:"thumbnail_url" toml:"thumbnail_url" yaml:"thumbnail_url"`
	PlatformName            string      `boil:"platform_name" json:"platform_name" toml:"platform_name" yaml:"platform_name"`
	PlatformURL             string      `boil:"platform_url" json:"platform_url" toml:"platform_url" yaml:"platform_url"`
	PlatformFaviconURL      string      `boil:"platform_favicon_url" json:"platform_favicon_url" toml:"platform_favicon_url" yaml:"platform_favicon_url"`
	IsEng                   bool        `boil:"is_eng" json:"is_eng" toml:"is_eng" yaml:"is_eng"`
	IsRead                  bool        `boil:"is_read" json:"is_read" toml:"is_read" yaml:"is_read"`
	IsPrivate               bool        `boil:"is_private" json:"is_private" toml:"is_private" yaml:"is_private"`
	CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *favoriteArticleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L favoriteArticleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FavoriteArticleColumns = struct {
	ID                      string
	UserID                  string
	FavoriteArticleFolderID string
	PlatformID              string
	ArticleID               string
	Title                   string
	Description             string
	ArticleURL              string
	PublishedAt             string
	AuthorName              string
	Tags                    string
	ThumbnailURL            string
	PlatformName            string
	PlatformURL             string
	PlatformFaviconURL      string
	IsEng                   string
	IsRead                  string
	IsPrivate               string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "id",
	UserID:                  "user_id",
	FavoriteArticleFolderID: "favorite_article_folder_id",
	PlatformID:              "platform_id",
	ArticleID:               "article_id",
	Title:                   "title",
	Description:             "description",
	ArticleURL:              "article_url",
	PublishedAt:             "published_at",
	AuthorName:              "author_name",
	Tags:                    "tags",
	ThumbnailURL:            "thumbnail_url",
	PlatformName:            "platform_name",
	PlatformURL:             "platform_url",
	PlatformFaviconURL:      "platform_favicon_url",
	IsEng:                   "is_eng",
	IsRead:                  "is_read",
	IsPrivate:               "is_private",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
}

var FavoriteArticleTableColumns = struct {
	ID                      string
	UserID                  string
	FavoriteArticleFolderID string
	PlatformID              string
	ArticleID               string
	Title                   string
	Description             string
	ArticleURL              string
	PublishedAt             string
	AuthorName              string
	Tags                    string
	ThumbnailURL            string
	PlatformName            string
	PlatformURL             string
	PlatformFaviconURL      string
	IsEng                   string
	IsRead                  string
	IsPrivate               string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "favorite_articles.id",
	UserID:                  "favorite_articles.user_id",
	FavoriteArticleFolderID: "favorite_articles.favorite_article_folder_id",
	PlatformID:              "favorite_articles.platform_id",
	ArticleID:               "favorite_articles.article_id",
	Title:                   "favorite_articles.title",
	Description:             "favorite_articles.description",
	ArticleURL:              "favorite_articles.article_url",
	PublishedAt:             "favorite_articles.published_at",
	AuthorName:              "favorite_articles.author_name",
	Tags:                    "favorite_articles.tags",
	ThumbnailURL:            "favorite_articles.thumbnail_url",
	PlatformName:            "favorite_articles.platform_name",
	PlatformURL:             "favorite_articles.platform_url",
	PlatformFaviconURL:      "favorite_articles.platform_favicon_url",
	IsEng:                   "favorite_articles.is_eng",
	IsRead:                  "favorite_articles.is_read",
	IsPrivate:               "favorite_articles.is_private",
	CreatedAt:               "favorite_articles.created_at",
	UpdatedAt:               "favorite_articles.updated_at",
}

// Generated where

var FavoriteArticleWhere = struct {
	ID                      whereHelperstring
	UserID                  whereHelperstring
	FavoriteArticleFolderID whereHelperstring
	PlatformID              whereHelpernull_String
	ArticleID               whereHelperstring
	Title                   whereHelperstring
	Description             whereHelperstring
	ArticleURL              whereHelperstring
	PublishedAt             whereHelpernull_Time
	AuthorName              whereHelpernull_String
	Tags                    whereHelpernull_String
	ThumbnailURL            whereHelperstring
	PlatformName            whereHelperstring
	PlatformURL             whereHelperstring
	PlatformFaviconURL      whereHelperstring
	IsEng                   whereHelperbool
	IsRead                  whereHelperbool
	IsPrivate               whereHelperbool
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
}{
	ID:                      whereHelperstring{field: "\"favorite_articles\".\"id\""},
	UserID:                  whereHelperstring{field: "\"favorite_articles\".\"user_id\""},
	FavoriteArticleFolderID: whereHelperstring{field: "\"favorite_articles\".\"favorite_article_folder_id\""},
	PlatformID:              whereHelpernull_String{field: "\"favorite_articles\".\"platform_id\""},
	ArticleID:               whereHelperstring{field: "\"favorite_articles\".\"article_id\""},
	Title:                   whereHelperstring{field: "\"favorite_articles\".\"title\""},
	Description:             whereHelperstring{field: "\"favorite_articles\".\"description\""},
	ArticleURL:              whereHelperstring{field: "\"favorite_articles\".\"article_url\""},
	PublishedAt:             whereHelpernull_Time{field: "\"favorite_articles\".\"published_at\""},
	AuthorName:              whereHelpernull_String{field: "\"favorite_articles\".\"author_name\""},
	Tags:                    whereHelpernull_String{field: "\"favorite_articles\".\"tags\""},
	ThumbnailURL:            whereHelperstring{field: "\"favorite_articles\".\"thumbnail_url\""},
	PlatformName:            whereHelperstring{field: "\"favorite_articles\".\"platform_name\""},
	PlatformURL:             whereHelperstring{field: "\"favorite_articles\".\"platform_url\""},
	PlatformFaviconURL:      whereHelperstring{field: "\"favorite_articles\".\"platform_favicon_url\""},
	IsEng:                   whereHelperbool{field: "\"favorite_articles\".\"is_eng\""},
	IsRead:                  whereHelperbool{field: "\"favorite_articles\".\"is_read\""},
	IsPrivate:               whereHelperbool{field: "\"favorite_articles\".\"is_private\""},
	CreatedAt:               whereHelpertime_Time{field: "\"favorite_articles\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"favorite_articles\".\"updated_at\""},
}

// FavoriteArticleRels is where relationship names are stored.
var FavoriteArticleRels = struct {
	Article               string
	FavoriteArticleFolder string
	Platform              string
	User                  string
}{
	Article:               "Article",
	FavoriteArticleFolder: "FavoriteArticleFolder",
	Platform:              "Platform",
	User:                  "User",
}

// favoriteArticleR is where relationships are stored.
type favoriteArticleR struct {
	Article               *Article               `boil:"Article" json:"Article" toml:"Article" yaml:"Article"`
	FavoriteArticleFolder *FavoriteArticleFolder `boil:"FavoriteArticleFolder" json:"FavoriteArticleFolder" toml:"FavoriteArticleFolder" yaml:"FavoriteArticleFolder"`
	Platform              *Platform              `boil:"Platform" json:"Platform" toml:"Platform" yaml:"Platform"`
	User                  *Profile               `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*favoriteArticleR) NewStruct() *favoriteArticleR {
	return &favoriteArticleR{}
}

func (r *favoriteArticleR) GetArticle() *Article {
	if r == nil {
		return nil
	}
	return r.Article
}

func (r *favoriteArticleR) GetFavoriteArticleFolder() *FavoriteArticleFolder {
	if r == nil {
		return nil
	}
	return r.FavoriteArticleFolder
}

func (r *favoriteArticleR) GetPlatform() *Platform {
	if r == nil {
		return nil
	}
	return r.Platform
}

func (r *favoriteArticleR) GetUser() *Profile {
	if r == nil {
		return nil
	}
	return r.User
}

// favoriteArticleL is where Load methods for each relationship are stored.
type favoriteArticleL struct{}

var (
	favoriteArticleAllColumns            = []string{"id", "user_id", "favorite_article_folder_id", "platform_id", "article_id", "title", "description", "article_url", "published_at", "author_name", "tags", "thumbnail_url", "platform_name", "platform_url", "platform_favicon_url", "is_eng", "is_read", "is_private", "created_at", "updated_at"}
	favoriteArticleColumnsWithoutDefault = []string{"user_id", "favorite_article_folder_id", "article_id", "title", "description", "article_url", "thumbnail_url", "platform_name", "platform_url", "platform_favicon_url"}
	favoriteArticleColumnsWithDefault    = []string{"id", "platform_id", "published_at", "author_name", "tags", "is_eng", "is_read", "is_private", "created_at", "updated_at"}
	favoriteArticlePrimaryKeyColumns     = []string{"id"}
	favoriteArticleGeneratedColumns      = []string{}
)

type (
	// FavoriteArticleSlice is an alias for a slice of pointers to FavoriteArticle.
	// This should almost always be used instead of []FavoriteArticle.
	FavoriteArticleSlice []*FavoriteArticle
	// FavoriteArticleHook is the signature for custom FavoriteArticle hook methods
	FavoriteArticleHook func(context.Context, boil.ContextExecutor, *FavoriteArticle) error

	favoriteArticleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	favoriteArticleType                 = reflect.TypeOf(&FavoriteArticle{})
	favoriteArticleMapping              = queries.MakeStructMapping(favoriteArticleType)
	favoriteArticlePrimaryKeyMapping, _ = queries.BindMapping(favoriteArticleType, favoriteArticleMapping, favoriteArticlePrimaryKeyColumns)
	favoriteArticleInsertCacheMut       sync.RWMutex
	favoriteArticleInsertCache          = make(map[string]insertCache)
	favoriteArticleUpdateCacheMut       sync.RWMutex
	favoriteArticleUpdateCache          = make(map[string]updateCache)
	favoriteArticleUpsertCacheMut       sync.RWMutex
	favoriteArticleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var favoriteArticleAfterSelectMu sync.Mutex
var favoriteArticleAfterSelectHooks []FavoriteArticleHook

var favoriteArticleBeforeInsertMu sync.Mutex
var favoriteArticleBeforeInsertHooks []FavoriteArticleHook
var favoriteArticleAfterInsertMu sync.Mutex
var favoriteArticleAfterInsertHooks []FavoriteArticleHook

var favoriteArticleBeforeUpdateMu sync.Mutex
var favoriteArticleBeforeUpdateHooks []FavoriteArticleHook
var favoriteArticleAfterUpdateMu sync.Mutex
var favoriteArticleAfterUpdateHooks []FavoriteArticleHook

var favoriteArticleBeforeDeleteMu sync.Mutex
var favoriteArticleBeforeDeleteHooks []FavoriteArticleHook
var favoriteArticleAfterDeleteMu sync.Mutex
var favoriteArticleAfterDeleteHooks []FavoriteArticleHook

var favoriteArticleBeforeUpsertMu sync.Mutex
var favoriteArticleBeforeUpsertHooks []FavoriteArticleHook
var favoriteArticleAfterUpsertMu sync.Mutex
var favoriteArticleAfterUpsertHooks []FavoriteArticleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FavoriteArticle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FavoriteArticle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FavoriteArticle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FavoriteArticle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FavoriteArticle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FavoriteArticle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FavoriteArticle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FavoriteArticle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FavoriteArticle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteArticleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFavoriteArticleHook registers your hook function for all future operations.
func AddFavoriteArticleHook(hookPoint boil.HookPoint, favoriteArticleHook FavoriteArticleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		favoriteArticleAfterSelectMu.Lock()
		favoriteArticleAfterSelectHooks = append(favoriteArticleAfterSelectHooks, favoriteArticleHook)
		favoriteArticleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		favoriteArticleBeforeInsertMu.Lock()
		favoriteArticleBeforeInsertHooks = append(favoriteArticleBeforeInsertHooks, favoriteArticleHook)
		favoriteArticleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		favoriteArticleAfterInsertMu.Lock()
		favoriteArticleAfterInsertHooks = append(favoriteArticleAfterInsertHooks, favoriteArticleHook)
		favoriteArticleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		favoriteArticleBeforeUpdateMu.Lock()
		favoriteArticleBeforeUpdateHooks = append(favoriteArticleBeforeUpdateHooks, favoriteArticleHook)
		favoriteArticleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		favoriteArticleAfterUpdateMu.Lock()
		favoriteArticleAfterUpdateHooks = append(favoriteArticleAfterUpdateHooks, favoriteArticleHook)
		favoriteArticleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		favoriteArticleBeforeDeleteMu.Lock()
		favoriteArticleBeforeDeleteHooks = append(favoriteArticleBeforeDeleteHooks, favoriteArticleHook)
		favoriteArticleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		favoriteArticleAfterDeleteMu.Lock()
		favoriteArticleAfterDeleteHooks = append(favoriteArticleAfterDeleteHooks, favoriteArticleHook)
		favoriteArticleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		favoriteArticleBeforeUpsertMu.Lock()
		favoriteArticleBeforeUpsertHooks = append(favoriteArticleBeforeUpsertHooks, favoriteArticleHook)
		favoriteArticleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		favoriteArticleAfterUpsertMu.Lock()
		favoriteArticleAfterUpsertHooks = append(favoriteArticleAfterUpsertHooks, favoriteArticleHook)
		favoriteArticleAfterUpsertMu.Unlock()
	}
}

// One returns a single favoriteArticle record from the query.
func (q favoriteArticleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FavoriteArticle, error) {
	o := &FavoriteArticle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for favorite_articles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FavoriteArticle records from the query.
func (q favoriteArticleQuery) All(ctx context.Context, exec boil.ContextExecutor) (FavoriteArticleSlice, error) {
	var o []*FavoriteArticle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to FavoriteArticle slice")
	}

	if len(favoriteArticleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FavoriteArticle records in the query.
func (q favoriteArticleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count favorite_articles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q favoriteArticleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if favorite_articles exists")
	}

	return count > 0, nil
}

// Article pointed to by the foreign key.
func (o *FavoriteArticle) Article(mods ...qm.QueryMod) articleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArticleID),
	}

	queryMods = append(queryMods, mods...)

	return Articles(queryMods...)
}

// FavoriteArticleFolder pointed to by the foreign key.
func (o *FavoriteArticle) FavoriteArticleFolder(mods ...qm.QueryMod) favoriteArticleFolderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FavoriteArticleFolderID),
	}

	queryMods = append(queryMods, mods...)

	return FavoriteArticleFolders(queryMods...)
}

// Platform pointed to by the foreign key.
func (o *FavoriteArticle) Platform(mods ...qm.QueryMod) platformQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlatformID),
	}

	queryMods = append(queryMods, mods...)

	return Platforms(queryMods...)
}

// User pointed to by the foreign key.
func (o *FavoriteArticle) User(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Profiles(queryMods...)
}

// LoadArticle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteArticleL) LoadArticle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteArticle interface{}, mods queries.Applicator) error {
	var slice []*FavoriteArticle
	var object *FavoriteArticle

	if singular {
		var ok bool
		object, ok = maybeFavoriteArticle.(*FavoriteArticle)
		if !ok {
			object = new(FavoriteArticle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFavoriteArticle))
			}
		}
	} else {
		s, ok := maybeFavoriteArticle.(*[]*FavoriteArticle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFavoriteArticle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &favoriteArticleR{}
		}
		args[object.ArticleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteArticleR{}
			}

			args[obj.ArticleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`articles`),
		qm.WhereIn(`articles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Article")
	}

	var resultSlice []*Article
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Article")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for articles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for articles")
	}

	if len(articleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Article = foreign
		if foreign.R == nil {
			foreign.R = &articleR{}
		}
		foreign.R.FavoriteArticles = append(foreign.R.FavoriteArticles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArticleID == foreign.ID {
				local.R.Article = foreign
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.FavoriteArticles = append(foreign.R.FavoriteArticles, local)
				break
			}
		}
	}

	return nil
}

// LoadFavoriteArticleFolder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteArticleL) LoadFavoriteArticleFolder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteArticle interface{}, mods queries.Applicator) error {
	var slice []*FavoriteArticle
	var object *FavoriteArticle

	if singular {
		var ok bool
		object, ok = maybeFavoriteArticle.(*FavoriteArticle)
		if !ok {
			object = new(FavoriteArticle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFavoriteArticle))
			}
		}
	} else {
		s, ok := maybeFavoriteArticle.(*[]*FavoriteArticle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFavoriteArticle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &favoriteArticleR{}
		}
		args[object.FavoriteArticleFolderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteArticleR{}
			}

			args[obj.FavoriteArticleFolderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`favorite_article_folders`),
		qm.WhereIn(`favorite_article_folders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FavoriteArticleFolder")
	}

	var resultSlice []*FavoriteArticleFolder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FavoriteArticleFolder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for favorite_article_folders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorite_article_folders")
	}

	if len(favoriteArticleFolderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FavoriteArticleFolder = foreign
		if foreign.R == nil {
			foreign.R = &favoriteArticleFolderR{}
		}
		foreign.R.FavoriteArticles = append(foreign.R.FavoriteArticles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FavoriteArticleFolderID == foreign.ID {
				local.R.FavoriteArticleFolder = foreign
				if foreign.R == nil {
					foreign.R = &favoriteArticleFolderR{}
				}
				foreign.R.FavoriteArticles = append(foreign.R.FavoriteArticles, local)
				break
			}
		}
	}

	return nil
}

// LoadPlatform allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteArticleL) LoadPlatform(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteArticle interface{}, mods queries.Applicator) error {
	var slice []*FavoriteArticle
	var object *FavoriteArticle

	if singular {
		var ok bool
		object, ok = maybeFavoriteArticle.(*FavoriteArticle)
		if !ok {
			object = new(FavoriteArticle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFavoriteArticle))
			}
		}
	} else {
		s, ok := maybeFavoriteArticle.(*[]*FavoriteArticle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFavoriteArticle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &favoriteArticleR{}
		}
		if !queries.IsNil(object.PlatformID) {
			args[object.PlatformID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteArticleR{}
			}

			if !queries.IsNil(obj.PlatformID) {
				args[obj.PlatformID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`platforms`),
		qm.WhereIn(`platforms.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Platform")
	}

	var resultSlice []*Platform
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Platform")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for platforms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for platforms")
	}

	if len(platformAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Platform = foreign
		if foreign.R == nil {
			foreign.R = &platformR{}
		}
		foreign.R.FavoriteArticles = append(foreign.R.FavoriteArticles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlatformID, foreign.ID) {
				local.R.Platform = foreign
				if foreign.R == nil {
					foreign.R = &platformR{}
				}
				foreign.R.FavoriteArticles = append(foreign.R.FavoriteArticles, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteArticleL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteArticle interface{}, mods queries.Applicator) error {
	var slice []*FavoriteArticle
	var object *FavoriteArticle

	if singular {
		var ok bool
		object, ok = maybeFavoriteArticle.(*FavoriteArticle)
		if !ok {
			object = new(FavoriteArticle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFavoriteArticle))
			}
		}
	} else {
		s, ok := maybeFavoriteArticle.(*[]*FavoriteArticle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFavoriteArticle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFavoriteArticle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &favoriteArticleR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteArticleR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`profiles`),
		qm.WhereIn(`profiles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.UserFavoriteArticles = append(foreign.R.UserFavoriteArticles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.UserFavoriteArticles = append(foreign.R.UserFavoriteArticles, local)
				break
			}
		}
	}

	return nil
}

// SetArticle of the favoriteArticle to the related item.
// Sets o.R.Article to related.
// Adds o to related.R.FavoriteArticles.
func (o *FavoriteArticle) SetArticle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Article) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"favorite_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"article_id"}),
		strmangle.WhereClause("\"", "\"", 2, favoriteArticlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArticleID = related.ID
	if o.R == nil {
		o.R = &favoriteArticleR{
			Article: related,
		}
	} else {
		o.R.Article = related
	}

	if related.R == nil {
		related.R = &articleR{
			FavoriteArticles: FavoriteArticleSlice{o},
		}
	} else {
		related.R.FavoriteArticles = append(related.R.FavoriteArticles, o)
	}

	return nil
}

// SetFavoriteArticleFolder of the favoriteArticle to the related item.
// Sets o.R.FavoriteArticleFolder to related.
// Adds o to related.R.FavoriteArticles.
func (o *FavoriteArticle) SetFavoriteArticleFolder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FavoriteArticleFolder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"favorite_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"favorite_article_folder_id"}),
		strmangle.WhereClause("\"", "\"", 2, favoriteArticlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FavoriteArticleFolderID = related.ID
	if o.R == nil {
		o.R = &favoriteArticleR{
			FavoriteArticleFolder: related,
		}
	} else {
		o.R.FavoriteArticleFolder = related
	}

	if related.R == nil {
		related.R = &favoriteArticleFolderR{
			FavoriteArticles: FavoriteArticleSlice{o},
		}
	} else {
		related.R.FavoriteArticles = append(related.R.FavoriteArticles, o)
	}

	return nil
}

// SetPlatform of the favoriteArticle to the related item.
// Sets o.R.Platform to related.
// Adds o to related.R.FavoriteArticles.
func (o *FavoriteArticle) SetPlatform(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Platform) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"favorite_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"platform_id"}),
		strmangle.WhereClause("\"", "\"", 2, favoriteArticlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlatformID, related.ID)
	if o.R == nil {
		o.R = &favoriteArticleR{
			Platform: related,
		}
	} else {
		o.R.Platform = related
	}

	if related.R == nil {
		related.R = &platformR{
			FavoriteArticles: FavoriteArticleSlice{o},
		}
	} else {
		related.R.FavoriteArticles = append(related.R.FavoriteArticles, o)
	}

	return nil
}

// RemovePlatform relationship.
// Sets o.R.Platform to nil.
// Removes o from all passed in related items' relationships struct.
func (o *FavoriteArticle) RemovePlatform(ctx context.Context, exec boil.ContextExecutor, related *Platform) error {
	var err error

	queries.SetScanner(&o.PlatformID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("platform_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Platform = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FavoriteArticles {
		if queries.Equal(o.PlatformID, ri.PlatformID) {
			continue
		}

		ln := len(related.R.FavoriteArticles)
		if ln > 1 && i < ln-1 {
			related.R.FavoriteArticles[i] = related.R.FavoriteArticles[ln-1]
		}
		related.R.FavoriteArticles = related.R.FavoriteArticles[:ln-1]
		break
	}
	return nil
}

// SetUser of the favoriteArticle to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserFavoriteArticles.
func (o *FavoriteArticle) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"favorite_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, favoriteArticlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &favoriteArticleR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &profileR{
			UserFavoriteArticles: FavoriteArticleSlice{o},
		}
	} else {
		related.R.UserFavoriteArticles = append(related.R.UserFavoriteArticles, o)
	}

	return nil
}

// FavoriteArticles retrieves all the records using an executor.
func FavoriteArticles(mods ...qm.QueryMod) favoriteArticleQuery {
	mods = append(mods, qm.From("\"favorite_articles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"favorite_articles\".*"})
	}

	return favoriteArticleQuery{q}
}

// FindFavoriteArticle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFavoriteArticle(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FavoriteArticle, error) {
	favoriteArticleObj := &FavoriteArticle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"favorite_articles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, favoriteArticleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from favorite_articles")
	}

	if err = favoriteArticleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return favoriteArticleObj, err
	}

	return favoriteArticleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FavoriteArticle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no favorite_articles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(favoriteArticleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	favoriteArticleInsertCacheMut.RLock()
	cache, cached := favoriteArticleInsertCache[key]
	favoriteArticleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			favoriteArticleAllColumns,
			favoriteArticleColumnsWithDefault,
			favoriteArticleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(favoriteArticleType, favoriteArticleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(favoriteArticleType, favoriteArticleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"favorite_articles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"favorite_articles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into favorite_articles")
	}

	if !cached {
		favoriteArticleInsertCacheMut.Lock()
		favoriteArticleInsertCache[key] = cache
		favoriteArticleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FavoriteArticle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FavoriteArticle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	favoriteArticleUpdateCacheMut.RLock()
	cache, cached := favoriteArticleUpdateCache[key]
	favoriteArticleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			favoriteArticleAllColumns,
			favoriteArticlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update favorite_articles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"favorite_articles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, favoriteArticlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(favoriteArticleType, favoriteArticleMapping, append(wl, favoriteArticlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update favorite_articles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for favorite_articles")
	}

	if !cached {
		favoriteArticleUpdateCacheMut.Lock()
		favoriteArticleUpdateCache[key] = cache
		favoriteArticleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q favoriteArticleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for favorite_articles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for favorite_articles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FavoriteArticleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteArticlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"favorite_articles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, favoriteArticlePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in favoriteArticle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all favoriteArticle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FavoriteArticle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no favorite_articles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(favoriteArticleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	favoriteArticleUpsertCacheMut.RLock()
	cache, cached := favoriteArticleUpsertCache[key]
	favoriteArticleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			favoriteArticleAllColumns,
			favoriteArticleColumnsWithDefault,
			favoriteArticleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			favoriteArticleAllColumns,
			favoriteArticlePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert favorite_articles, could not build update column list")
		}

		ret := strmangle.SetComplement(favoriteArticleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(favoriteArticlePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert favorite_articles, could not build conflict column list")
			}

			conflict = make([]string, len(favoriteArticlePrimaryKeyColumns))
			copy(conflict, favoriteArticlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"favorite_articles\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(favoriteArticleType, favoriteArticleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(favoriteArticleType, favoriteArticleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert favorite_articles")
	}

	if !cached {
		favoriteArticleUpsertCacheMut.Lock()
		favoriteArticleUpsertCache[key] = cache
		favoriteArticleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FavoriteArticle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FavoriteArticle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no FavoriteArticle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), favoriteArticlePrimaryKeyMapping)
	sql := "DELETE FROM \"favorite_articles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from favorite_articles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for favorite_articles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q favoriteArticleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no favoriteArticleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from favorite_articles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for favorite_articles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FavoriteArticleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(favoriteArticleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteArticlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"favorite_articles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, favoriteArticlePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from favoriteArticle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for favorite_articles")
	}

	if len(favoriteArticleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FavoriteArticle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFavoriteArticle(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FavoriteArticleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FavoriteArticleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteArticlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"favorite_articles\".* FROM \"favorite_articles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, favoriteArticlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in FavoriteArticleSlice")
	}

	*o = slice

	return nil
}

// FavoriteArticleExists checks if the FavoriteArticle row exists.
func FavoriteArticleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"favorite_articles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if favorite_articles exists")
	}

	return exists, nil
}

// Exists checks if the FavoriteArticle row exists.
func (o *FavoriteArticle) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FavoriteArticleExists(ctx, exec, o.ID)
}
