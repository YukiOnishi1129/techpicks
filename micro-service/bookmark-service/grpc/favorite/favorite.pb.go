// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: favorite/favorite.proto

package favorite

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetFavoriteArticleFoldersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               string                  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Keyword              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Cursor               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit                *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	FavoriteArticleLimit *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=favorite_article_limit,json=favoriteArticleLimit,proto3" json:"favorite_article_limit,omitempty"`
	IsFolderOnly         *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=is_folder_only,json=isFolderOnly,proto3" json:"is_folder_only,omitempty"`
	IsAllFetch           *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=is_all_fetch,json=isAllFetch,proto3" json:"is_all_fetch,omitempty"`
}

func (x *GetFavoriteArticleFoldersRequest) Reset() {
	*x = GetFavoriteArticleFoldersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteArticleFoldersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteArticleFoldersRequest) ProtoMessage() {}

func (x *GetFavoriteArticleFoldersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteArticleFoldersRequest.ProtoReflect.Descriptor instead.
func (*GetFavoriteArticleFoldersRequest) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{0}
}

func (x *GetFavoriteArticleFoldersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetFavoriteArticleFoldersRequest) GetKeyword() *wrapperspb.StringValue {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *GetFavoriteArticleFoldersRequest) GetCursor() *wrapperspb.StringValue {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *GetFavoriteArticleFoldersRequest) GetLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *GetFavoriteArticleFoldersRequest) GetFavoriteArticleLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.FavoriteArticleLimit
	}
	return nil
}

func (x *GetFavoriteArticleFoldersRequest) GetIsFolderOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsFolderOnly
	}
	return nil
}

func (x *GetFavoriteArticleFoldersRequest) GetIsAllFetch() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsAllFetch
	}
	return nil
}

type GetFavoriteArticleFoldersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteArticleFoldersEdge []*FavoriteArticleFolderEdge `protobuf:"bytes,1,rep,name=favorite_article_folders_edge,json=favoriteArticleFoldersEdge,proto3" json:"favorite_article_folders_edge,omitempty"`
	PageInfo                   *PageInfo                    `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *GetFavoriteArticleFoldersResponse) Reset() {
	*x = GetFavoriteArticleFoldersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteArticleFoldersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteArticleFoldersResponse) ProtoMessage() {}

func (x *GetFavoriteArticleFoldersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteArticleFoldersResponse.ProtoReflect.Descriptor instead.
func (*GetFavoriteArticleFoldersResponse) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{1}
}

func (x *GetFavoriteArticleFoldersResponse) GetFavoriteArticleFoldersEdge() []*FavoriteArticleFolderEdge {
	if x != nil {
		return x.FavoriteArticleFoldersEdge
	}
	return nil
}

func (x *GetFavoriteArticleFoldersResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetFavoriteArticleFolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteArticleFolder *FavoriteArticleFolder `protobuf:"bytes,1,opt,name=favorite_article_folder,json=favoriteArticleFolder,proto3" json:"favorite_article_folder,omitempty"`
}

func (x *GetFavoriteArticleFolderResponse) Reset() {
	*x = GetFavoriteArticleFolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteArticleFolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteArticleFolderResponse) ProtoMessage() {}

func (x *GetFavoriteArticleFolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteArticleFolderResponse.ProtoReflect.Descriptor instead.
func (*GetFavoriteArticleFolderResponse) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{2}
}

func (x *GetFavoriteArticleFolderResponse) GetFavoriteArticleFolder() *FavoriteArticleFolder {
	if x != nil {
		return x.FavoriteArticleFolder
	}
	return nil
}

type GetFavoriteArticleFolderByArticleIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId string `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *GetFavoriteArticleFolderByArticleIdRequest) Reset() {
	*x = GetFavoriteArticleFolderByArticleIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteArticleFolderByArticleIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteArticleFolderByArticleIdRequest) ProtoMessage() {}

func (x *GetFavoriteArticleFolderByArticleIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteArticleFolderByArticleIdRequest.ProtoReflect.Descriptor instead.
func (*GetFavoriteArticleFolderByArticleIdRequest) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{3}
}

func (x *GetFavoriteArticleFolderByArticleIdRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

type CreateFavoriteArticleFolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteArticleFolder *FavoriteArticleFolder `protobuf:"bytes,1,opt,name=favorite_article_folder,json=favoriteArticleFolder,proto3" json:"favorite_article_folder,omitempty"`
}

func (x *CreateFavoriteArticleFolderResponse) Reset() {
	*x = CreateFavoriteArticleFolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFavoriteArticleFolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFavoriteArticleFolderResponse) ProtoMessage() {}

func (x *CreateFavoriteArticleFolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFavoriteArticleFolderResponse.ProtoReflect.Descriptor instead.
func (*CreateFavoriteArticleFolderResponse) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFavoriteArticleFolderResponse) GetFavoriteArticleFolder() *FavoriteArticleFolder {
	if x != nil {
		return x.FavoriteArticleFolder
	}
	return nil
}

type CreateFavoriteArticleFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateFavoriteArticleFolderRequest) Reset() {
	*x = CreateFavoriteArticleFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFavoriteArticleFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFavoriteArticleFolderRequest) ProtoMessage() {}

func (x *CreateFavoriteArticleFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFavoriteArticleFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateFavoriteArticleFolderRequest) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFavoriteArticleFolderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateFavoriteArticleFolderRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateFavoriteArticleFolderRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateFavoriteArticleFolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteArticleFolder *FavoriteArticleFolder `protobuf:"bytes,1,opt,name=favorite_article_folder,json=favoriteArticleFolder,proto3" json:"favorite_article_folder,omitempty"`
}

func (x *UpdateFavoriteArticleFolderResponse) Reset() {
	*x = UpdateFavoriteArticleFolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFavoriteArticleFolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFavoriteArticleFolderResponse) ProtoMessage() {}

func (x *UpdateFavoriteArticleFolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFavoriteArticleFolderResponse.ProtoReflect.Descriptor instead.
func (*UpdateFavoriteArticleFolderResponse) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFavoriteArticleFolderResponse) GetFavoriteArticleFolder() *FavoriteArticleFolder {
	if x != nil {
		return x.FavoriteArticleFolder
	}
	return nil
}

type UpdateFavoriteArticleFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string                  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title       string                  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateFavoriteArticleFolderRequest) Reset() {
	*x = UpdateFavoriteArticleFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFavoriteArticleFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFavoriteArticleFolderRequest) ProtoMessage() {}

func (x *UpdateFavoriteArticleFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFavoriteArticleFolderRequest.ProtoReflect.Descriptor instead.
func (*UpdateFavoriteArticleFolderRequest) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFavoriteArticleFolderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFavoriteArticleFolderRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateFavoriteArticleFolderRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateFavoriteArticleFolderRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type FavoriteArticleFolderEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node   *FavoriteArticleFolder `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Cursor string                 `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *FavoriteArticleFolderEdge) Reset() {
	*x = FavoriteArticleFolderEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteArticleFolderEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteArticleFolderEdge) ProtoMessage() {}

func (x *FavoriteArticleFolderEdge) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteArticleFolderEdge.ProtoReflect.Descriptor instead.
func (*FavoriteArticleFolderEdge) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{8}
}

func (x *FavoriteArticleFolderEdge) GetNode() *FavoriteArticleFolder {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *FavoriteArticleFolderEdge) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type FavoriteArticleEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node   *FavoriteArticle `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Cursor string           `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *FavoriteArticleEdge) Reset() {
	*x = FavoriteArticleEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteArticleEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteArticleEdge) ProtoMessage() {}

func (x *FavoriteArticleEdge) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteArticleEdge.ProtoReflect.Descriptor instead.
func (*FavoriteArticleEdge) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{9}
}

func (x *FavoriteArticleEdge) GetNode() *FavoriteArticle {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *FavoriteArticleEdge) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type FavoriteArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ArticleId               string                  `protobuf:"bytes,2,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	PlatformId              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	FavoriteArticleFolderId string                  `protobuf:"bytes,4,opt,name=favorite_article_folder_id,json=favoriteArticleFolderId,proto3" json:"favorite_article_folder_id,omitempty"`
	UserId                  string                  `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title                   string                  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description             string                  `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ThumbnailUrl            string                  `protobuf:"bytes,8,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	ArticleUrl              string                  `protobuf:"bytes,9,opt,name=article_url,json=articleUrl,proto3" json:"article_url,omitempty"`
	PublishedAt             *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	AuthorName              *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	Tags                    *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	PlatformName            string                  `protobuf:"bytes,13,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`
	PlatformUrl             string                  `protobuf:"bytes,14,opt,name=platform_url,json=platformUrl,proto3" json:"platform_url,omitempty"`
	PlatformFaviconUrl      string                  `protobuf:"bytes,15,opt,name=platform_favicon_url,json=platformFaviconUrl,proto3" json:"platform_favicon_url,omitempty"`
	IsEng                   bool                    `protobuf:"varint,16,opt,name=is_eng,json=isEng,proto3" json:"is_eng,omitempty"`
	IsPrivate               bool                    `protobuf:"varint,17,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	IsRead                  bool                    `protobuf:"varint,18,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	CreatedAt               *timestamppb.Timestamp  `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               *timestamppb.Timestamp  `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FavoriteArticle) Reset() {
	*x = FavoriteArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteArticle) ProtoMessage() {}

func (x *FavoriteArticle) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteArticle.ProtoReflect.Descriptor instead.
func (*FavoriteArticle) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{10}
}

func (x *FavoriteArticle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FavoriteArticle) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *FavoriteArticle) GetPlatformId() *wrapperspb.StringValue {
	if x != nil {
		return x.PlatformId
	}
	return nil
}

func (x *FavoriteArticle) GetFavoriteArticleFolderId() string {
	if x != nil {
		return x.FavoriteArticleFolderId
	}
	return ""
}

func (x *FavoriteArticle) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FavoriteArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FavoriteArticle) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FavoriteArticle) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *FavoriteArticle) GetArticleUrl() string {
	if x != nil {
		return x.ArticleUrl
	}
	return ""
}

func (x *FavoriteArticle) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *FavoriteArticle) GetAuthorName() *wrapperspb.StringValue {
	if x != nil {
		return x.AuthorName
	}
	return nil
}

func (x *FavoriteArticle) GetTags() *wrapperspb.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FavoriteArticle) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *FavoriteArticle) GetPlatformUrl() string {
	if x != nil {
		return x.PlatformUrl
	}
	return ""
}

func (x *FavoriteArticle) GetPlatformFaviconUrl() string {
	if x != nil {
		return x.PlatformFaviconUrl
	}
	return ""
}

func (x *FavoriteArticle) GetIsEng() bool {
	if x != nil {
		return x.IsEng
	}
	return false
}

func (x *FavoriteArticle) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *FavoriteArticle) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *FavoriteArticle) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FavoriteArticle) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FavoriteArticleFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId           string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title            string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FavoriteArticles []*FavoriteArticle     `protobuf:"bytes,7,rep,name=favorite_articles,json=favoriteArticles,proto3" json:"favorite_articles,omitempty"`
}

func (x *FavoriteArticleFolder) Reset() {
	*x = FavoriteArticleFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteArticleFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteArticleFolder) ProtoMessage() {}

func (x *FavoriteArticleFolder) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteArticleFolder.ProtoReflect.Descriptor instead.
func (*FavoriteArticleFolder) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{11}
}

func (x *FavoriteArticleFolder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FavoriteArticleFolder) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FavoriteArticleFolder) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FavoriteArticleFolder) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FavoriteArticleFolder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FavoriteArticleFolder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FavoriteArticleFolder) GetFavoriteArticles() []*FavoriteArticle {
	if x != nil {
		return x.FavoriteArticles
	}
	return nil
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndCursor   string `protobuf:"bytes,1,opt,name=end_cursor,json=endCursor,proto3" json:"end_cursor,omitempty"`
	HasNextPage bool   `protobuf:"varint,2,opt,name=has_next_page,json=hasNextPage,proto3" json:"has_next_page,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_favorite_favorite_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_favorite_favorite_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_favorite_favorite_proto_rawDescGZIP(), []int{12}
}

func (x *PageInfo) GetEndCursor() string {
	if x != nil {
		return x.EndCursor
	}
	return ""
}

func (x *PageInfo) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

var File_favorite_favorite_proto protoreflect.FileDescriptor

var file_favorite_favorite_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xaf, 0x03, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x31,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x51, 0x0a, 0x16, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x22, 0xd8, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x45, 0x64, 0x67, 0x65, 0x52, 0x1a, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x64, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73,
	0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x89, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x2a, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x17, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c,
	0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xa3, 0x01,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x19, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x13, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x64,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xc2, 0x06, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x76,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc4, 0x02, 0x0a,
	0x15, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x54, 0x0a,
	0x11, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x10, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x32, 0xfc, 0x04, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x42, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x96, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x3a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x59, 0x75, 0x6b, 0x69, 0x4f, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x31, 0x31, 0x32, 0x39, 0x2f, 0x74,
	0x65, 0x63, 0x68, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_favorite_favorite_proto_rawDescOnce sync.Once
	file_favorite_favorite_proto_rawDescData = file_favorite_favorite_proto_rawDesc
)

func file_favorite_favorite_proto_rawDescGZIP() []byte {
	file_favorite_favorite_proto_rawDescOnce.Do(func() {
		file_favorite_favorite_proto_rawDescData = protoimpl.X.CompressGZIP(file_favorite_favorite_proto_rawDescData)
	})
	return file_favorite_favorite_proto_rawDescData
}

var file_favorite_favorite_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_favorite_favorite_proto_goTypes = []any{
	(*GetFavoriteArticleFoldersRequest)(nil),           // 0: checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest
	(*GetFavoriteArticleFoldersResponse)(nil),          // 1: checkpicks.favorite.v1.GetFavoriteArticleFoldersResponse
	(*GetFavoriteArticleFolderResponse)(nil),           // 2: checkpicks.favorite.v1.GetFavoriteArticleFolderResponse
	(*GetFavoriteArticleFolderByArticleIdRequest)(nil), // 3: checkpicks.favorite.v1.GetFavoriteArticleFolderByArticleIdRequest
	(*CreateFavoriteArticleFolderResponse)(nil),        // 4: checkpicks.favorite.v1.CreateFavoriteArticleFolderResponse
	(*CreateFavoriteArticleFolderRequest)(nil),         // 5: checkpicks.favorite.v1.CreateFavoriteArticleFolderRequest
	(*UpdateFavoriteArticleFolderResponse)(nil),        // 6: checkpicks.favorite.v1.UpdateFavoriteArticleFolderResponse
	(*UpdateFavoriteArticleFolderRequest)(nil),         // 7: checkpicks.favorite.v1.UpdateFavoriteArticleFolderRequest
	(*FavoriteArticleFolderEdge)(nil),                  // 8: checkpicks.favorite.v1.FavoriteArticleFolderEdge
	(*FavoriteArticleEdge)(nil),                        // 9: checkpicks.favorite.v1.FavoriteArticleEdge
	(*FavoriteArticle)(nil),                            // 10: checkpicks.favorite.v1.FavoriteArticle
	(*FavoriteArticleFolder)(nil),                      // 11: checkpicks.favorite.v1.FavoriteArticleFolder
	(*PageInfo)(nil),                                   // 12: checkpicks.favorite.v1.PageInfo
	(*wrapperspb.StringValue)(nil),                     // 13: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),                      // 14: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),                       // 15: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),                      // 16: google.protobuf.Timestamp
}
var file_favorite_favorite_proto_depIdxs = []int32{
	13, // 0: checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest.keyword:type_name -> google.protobuf.StringValue
	13, // 1: checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest.cursor:type_name -> google.protobuf.StringValue
	14, // 2: checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest.limit:type_name -> google.protobuf.Int64Value
	14, // 3: checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest.favorite_article_limit:type_name -> google.protobuf.Int64Value
	15, // 4: checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest.is_folder_only:type_name -> google.protobuf.BoolValue
	15, // 5: checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest.is_all_fetch:type_name -> google.protobuf.BoolValue
	8,  // 6: checkpicks.favorite.v1.GetFavoriteArticleFoldersResponse.favorite_article_folders_edge:type_name -> checkpicks.favorite.v1.FavoriteArticleFolderEdge
	12, // 7: checkpicks.favorite.v1.GetFavoriteArticleFoldersResponse.page_info:type_name -> checkpicks.favorite.v1.PageInfo
	11, // 8: checkpicks.favorite.v1.GetFavoriteArticleFolderResponse.favorite_article_folder:type_name -> checkpicks.favorite.v1.FavoriteArticleFolder
	11, // 9: checkpicks.favorite.v1.CreateFavoriteArticleFolderResponse.favorite_article_folder:type_name -> checkpicks.favorite.v1.FavoriteArticleFolder
	11, // 10: checkpicks.favorite.v1.UpdateFavoriteArticleFolderResponse.favorite_article_folder:type_name -> checkpicks.favorite.v1.FavoriteArticleFolder
	13, // 11: checkpicks.favorite.v1.UpdateFavoriteArticleFolderRequest.description:type_name -> google.protobuf.StringValue
	11, // 12: checkpicks.favorite.v1.FavoriteArticleFolderEdge.node:type_name -> checkpicks.favorite.v1.FavoriteArticleFolder
	10, // 13: checkpicks.favorite.v1.FavoriteArticleEdge.node:type_name -> checkpicks.favorite.v1.FavoriteArticle
	13, // 14: checkpicks.favorite.v1.FavoriteArticle.platform_id:type_name -> google.protobuf.StringValue
	16, // 15: checkpicks.favorite.v1.FavoriteArticle.published_at:type_name -> google.protobuf.Timestamp
	13, // 16: checkpicks.favorite.v1.FavoriteArticle.author_name:type_name -> google.protobuf.StringValue
	13, // 17: checkpicks.favorite.v1.FavoriteArticle.tags:type_name -> google.protobuf.StringValue
	16, // 18: checkpicks.favorite.v1.FavoriteArticle.created_at:type_name -> google.protobuf.Timestamp
	16, // 19: checkpicks.favorite.v1.FavoriteArticle.updated_at:type_name -> google.protobuf.Timestamp
	16, // 20: checkpicks.favorite.v1.FavoriteArticleFolder.created_at:type_name -> google.protobuf.Timestamp
	16, // 21: checkpicks.favorite.v1.FavoriteArticleFolder.updated_at:type_name -> google.protobuf.Timestamp
	10, // 22: checkpicks.favorite.v1.FavoriteArticleFolder.favorite_articles:type_name -> checkpicks.favorite.v1.FavoriteArticle
	0,  // 23: checkpicks.favorite.v1.FavoriteService.GetFavoriteArticleFolders:input_type -> checkpicks.favorite.v1.GetFavoriteArticleFoldersRequest
	3,  // 24: checkpicks.favorite.v1.FavoriteService.GetFavoriteArticleFolderByArticleId:input_type -> checkpicks.favorite.v1.GetFavoriteArticleFolderByArticleIdRequest
	5,  // 25: checkpicks.favorite.v1.FavoriteService.CreateFavoriteArticleFolder:input_type -> checkpicks.favorite.v1.CreateFavoriteArticleFolderRequest
	7,  // 26: checkpicks.favorite.v1.FavoriteService.UpdateFavoriteArticleFolder:input_type -> checkpicks.favorite.v1.UpdateFavoriteArticleFolderRequest
	1,  // 27: checkpicks.favorite.v1.FavoriteService.GetFavoriteArticleFolders:output_type -> checkpicks.favorite.v1.GetFavoriteArticleFoldersResponse
	2,  // 28: checkpicks.favorite.v1.FavoriteService.GetFavoriteArticleFolderByArticleId:output_type -> checkpicks.favorite.v1.GetFavoriteArticleFolderResponse
	4,  // 29: checkpicks.favorite.v1.FavoriteService.CreateFavoriteArticleFolder:output_type -> checkpicks.favorite.v1.CreateFavoriteArticleFolderResponse
	6,  // 30: checkpicks.favorite.v1.FavoriteService.UpdateFavoriteArticleFolder:output_type -> checkpicks.favorite.v1.UpdateFavoriteArticleFolderResponse
	27, // [27:31] is the sub-list for method output_type
	23, // [23:27] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_favorite_favorite_proto_init() }
func file_favorite_favorite_proto_init() {
	if File_favorite_favorite_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_favorite_favorite_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteArticleFoldersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteArticleFoldersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteArticleFolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteArticleFolderByArticleIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFavoriteArticleFolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFavoriteArticleFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateFavoriteArticleFolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateFavoriteArticleFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FavoriteArticleFolderEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FavoriteArticleEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FavoriteArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FavoriteArticleFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_favorite_favorite_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_favorite_favorite_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_favorite_favorite_proto_goTypes,
		DependencyIndexes: file_favorite_favorite_proto_depIdxs,
		MessageInfos:      file_favorite_favorite_proto_msgTypes,
	}.Build()
	File_favorite_favorite_proto = out.File
	file_favorite_favorite_proto_rawDesc = nil
	file_favorite_favorite_proto_goTypes = nil
	file_favorite_favorite_proto_depIdxs = nil
}
