// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/content/content_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	content "github.com/YukiOnishi1129/techpicks/micro-service/bookmark-service/grpc/content"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockContentServiceClient is a mock of ContentServiceClient interface.
type MockContentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockContentServiceClientMockRecorder
}

// MockContentServiceClientMockRecorder is the mock recorder for MockContentServiceClient.
type MockContentServiceClientMockRecorder struct {
	mock *MockContentServiceClient
}

// NewMockContentServiceClient creates a new mock instance.
func NewMockContentServiceClient(ctrl *gomock.Controller) *MockContentServiceClient {
	mock := &MockContentServiceClient{ctrl: ctrl}
	mock.recorder = &MockContentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentServiceClient) EXPECT() *MockContentServiceClientMockRecorder {
	return m.recorder
}

// CreateUploadArticle mocks base method.
func (m *MockContentServiceClient) CreateUploadArticle(ctx context.Context, in *content.CreateUploadArticleRequest, opts ...grpc.CallOption) (*content.CreateArticleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUploadArticle", varargs...)
	ret0, _ := ret[0].(*content.CreateArticleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadArticle indicates an expected call of CreateUploadArticle.
func (mr *MockContentServiceClientMockRecorder) CreateUploadArticle(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadArticle", reflect.TypeOf((*MockContentServiceClient)(nil).CreateUploadArticle), varargs...)
}

// GetArticleOGP mocks base method.
func (m *MockContentServiceClient) GetArticleOGP(ctx context.Context, in *content.GetArticleOGPRequest, opts ...grpc.CallOption) (*content.GetArticleOGPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArticleOGP", varargs...)
	ret0, _ := ret[0].(*content.GetArticleOGPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleOGP indicates an expected call of GetArticleOGP.
func (mr *MockContentServiceClientMockRecorder) GetArticleOGP(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleOGP", reflect.TypeOf((*MockContentServiceClient)(nil).GetArticleOGP), varargs...)
}

// GetArticles mocks base method.
func (m *MockContentServiceClient) GetArticles(ctx context.Context, in *content.GetArticlesRequest, opts ...grpc.CallOption) (*content.GetArticlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArticles", varargs...)
	ret0, _ := ret[0].(*content.GetArticlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockContentServiceClientMockRecorder) GetArticles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockContentServiceClient)(nil).GetArticles), varargs...)
}

// MockContentServiceServer is a mock of ContentServiceServer interface.
type MockContentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockContentServiceServerMockRecorder
}

// MockContentServiceServerMockRecorder is the mock recorder for MockContentServiceServer.
type MockContentServiceServerMockRecorder struct {
	mock *MockContentServiceServer
}

// NewMockContentServiceServer creates a new mock instance.
func NewMockContentServiceServer(ctrl *gomock.Controller) *MockContentServiceServer {
	mock := &MockContentServiceServer{ctrl: ctrl}
	mock.recorder = &MockContentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentServiceServer) EXPECT() *MockContentServiceServerMockRecorder {
	return m.recorder
}

// CreateUploadArticle mocks base method.
func (m *MockContentServiceServer) CreateUploadArticle(arg0 context.Context, arg1 *content.CreateUploadArticleRequest) (*content.CreateArticleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadArticle", arg0, arg1)
	ret0, _ := ret[0].(*content.CreateArticleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadArticle indicates an expected call of CreateUploadArticle.
func (mr *MockContentServiceServerMockRecorder) CreateUploadArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadArticle", reflect.TypeOf((*MockContentServiceServer)(nil).CreateUploadArticle), arg0, arg1)
}

// GetArticleOGP mocks base method.
func (m *MockContentServiceServer) GetArticleOGP(arg0 context.Context, arg1 *content.GetArticleOGPRequest) (*content.GetArticleOGPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleOGP", arg0, arg1)
	ret0, _ := ret[0].(*content.GetArticleOGPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleOGP indicates an expected call of GetArticleOGP.
func (mr *MockContentServiceServerMockRecorder) GetArticleOGP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleOGP", reflect.TypeOf((*MockContentServiceServer)(nil).GetArticleOGP), arg0, arg1)
}

// GetArticles mocks base method.
func (m *MockContentServiceServer) GetArticles(arg0 context.Context, arg1 *content.GetArticlesRequest) (*content.GetArticlesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", arg0, arg1)
	ret0, _ := ret[0].(*content.GetArticlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockContentServiceServerMockRecorder) GetArticles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockContentServiceServer)(nil).GetArticles), arg0, arg1)
}

// MockUnsafeContentServiceServer is a mock of UnsafeContentServiceServer interface.
type MockUnsafeContentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeContentServiceServerMockRecorder
}

// MockUnsafeContentServiceServerMockRecorder is the mock recorder for MockUnsafeContentServiceServer.
type MockUnsafeContentServiceServerMockRecorder struct {
	mock *MockUnsafeContentServiceServer
}

// NewMockUnsafeContentServiceServer creates a new mock instance.
func NewMockUnsafeContentServiceServer(ctrl *gomock.Controller) *MockUnsafeContentServiceServer {
	mock := &MockUnsafeContentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeContentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeContentServiceServer) EXPECT() *MockUnsafeContentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedContentServiceServer mocks base method.
func (m *MockUnsafeContentServiceServer) mustEmbedUnimplementedContentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedContentServiceServer")
}

// mustEmbedUnimplementedContentServiceServer indicates an expected call of mustEmbedUnimplementedContentServiceServer.
func (mr *MockUnsafeContentServiceServerMockRecorder) mustEmbedUnimplementedContentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedContentServiceServer", reflect.TypeOf((*MockUnsafeContentServiceServer)(nil).mustEmbedUnimplementedContentServiceServer))
}
