// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v3.20.3
// source: favorite/favorite.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "checkpicks.favorite.v1";

export interface GetFavoriteArticleFolderResponse {
  favoriteArticleFolder: FavoriteArticleFolder | undefined;
}

export interface GetFavoriteArticleFolderByArticleIdRequest {
  articleId: string;
}

export interface FavoriteArticle {
  id: string;
  articleId: string;
  platformId: string | undefined;
  favoriteArticleFolderId: string;
  userId: string;
  title: string;
  thumbnailUrl: string;
  articleUrl: string;
  platformFaviconUrl: string;
  publishedAt: Timestamp | undefined;
  authorName: string | undefined;
  tags: string | undefined;
  platformName: string;
  platformUrl: string;
  isEng: boolean;
  isPrivate: boolean;
  isRead: boolean;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface FavoriteArticleFolder {
  id: string;
  userId: string;
  title: string;
  description: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const CHECKPICKS_FAVORITE_V1_PACKAGE_NAME = "checkpicks.favorite.v1";

export interface FavoriteServiceClient {
  getFavoriteArticleFolderByArticleId(
    request: GetFavoriteArticleFolderByArticleIdRequest,
  ): Observable<GetFavoriteArticleFolderResponse>;
}

export interface FavoriteServiceController {
  getFavoriteArticleFolderByArticleId(
    request: GetFavoriteArticleFolderByArticleIdRequest,
  ):
    | Promise<GetFavoriteArticleFolderResponse>
    | Observable<GetFavoriteArticleFolderResponse>
    | GetFavoriteArticleFolderResponse;
}

export function FavoriteServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getFavoriteArticleFolderByArticleId"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("FavoriteService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("FavoriteService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FAVORITE_SERVICE_NAME = "FavoriteService";
