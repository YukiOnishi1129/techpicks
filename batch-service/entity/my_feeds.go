// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MyFeed is an object representing the database table.
type MyFeed struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID         string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	MyFeedFolderID string    `boil:"my_feed_folder_id" json:"my_feed_folder_id" toml:"my_feed_folder_id" yaml:"my_feed_folder_id"`
	FeedID         string    `boil:"feed_id" json:"feed_id" toml:"feed_id" yaml:"feed_id"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *myFeedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L myFeedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MyFeedColumns = struct {
	ID             string
	UserID         string
	MyFeedFolderID string
	FeedID         string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	UserID:         "user_id",
	MyFeedFolderID: "my_feed_folder_id",
	FeedID:         "feed_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var MyFeedTableColumns = struct {
	ID             string
	UserID         string
	MyFeedFolderID string
	FeedID         string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "my_feeds.id",
	UserID:         "my_feeds.user_id",
	MyFeedFolderID: "my_feeds.my_feed_folder_id",
	FeedID:         "my_feeds.feed_id",
	CreatedAt:      "my_feeds.created_at",
	UpdatedAt:      "my_feeds.updated_at",
}

// Generated where

var MyFeedWhere = struct {
	ID             whereHelperstring
	UserID         whereHelperstring
	MyFeedFolderID whereHelperstring
	FeedID         whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"my_feeds\".\"id\""},
	UserID:         whereHelperstring{field: "\"my_feeds\".\"user_id\""},
	MyFeedFolderID: whereHelperstring{field: "\"my_feeds\".\"my_feed_folder_id\""},
	FeedID:         whereHelperstring{field: "\"my_feeds\".\"feed_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"my_feeds\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"my_feeds\".\"updated_at\""},
}

// MyFeedRels is where relationship names are stored.
var MyFeedRels = struct {
	Feed         string
	MyFeedFolder string
	User         string
}{
	Feed:         "Feed",
	MyFeedFolder: "MyFeedFolder",
	User:         "User",
}

// myFeedR is where relationships are stored.
type myFeedR struct {
	Feed         *Feed         `boil:"Feed" json:"Feed" toml:"Feed" yaml:"Feed"`
	MyFeedFolder *MyFeedFolder `boil:"MyFeedFolder" json:"MyFeedFolder" toml:"MyFeedFolder" yaml:"MyFeedFolder"`
	User         *Profile      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*myFeedR) NewStruct() *myFeedR {
	return &myFeedR{}
}

func (r *myFeedR) GetFeed() *Feed {
	if r == nil {
		return nil
	}
	return r.Feed
}

func (r *myFeedR) GetMyFeedFolder() *MyFeedFolder {
	if r == nil {
		return nil
	}
	return r.MyFeedFolder
}

func (r *myFeedR) GetUser() *Profile {
	if r == nil {
		return nil
	}
	return r.User
}

// myFeedL is where Load methods for each relationship are stored.
type myFeedL struct{}

var (
	myFeedAllColumns            = []string{"id", "user_id", "my_feed_folder_id", "feed_id", "created_at", "updated_at"}
	myFeedColumnsWithoutDefault = []string{"user_id", "my_feed_folder_id", "feed_id"}
	myFeedColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	myFeedPrimaryKeyColumns     = []string{"id"}
	myFeedGeneratedColumns      = []string{}
)

type (
	// MyFeedSlice is an alias for a slice of pointers to MyFeed.
	// This should almost always be used instead of []MyFeed.
	MyFeedSlice []*MyFeed
	// MyFeedHook is the signature for custom MyFeed hook methods
	MyFeedHook func(context.Context, boil.ContextExecutor, *MyFeed) error

	myFeedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	myFeedType                 = reflect.TypeOf(&MyFeed{})
	myFeedMapping              = queries.MakeStructMapping(myFeedType)
	myFeedPrimaryKeyMapping, _ = queries.BindMapping(myFeedType, myFeedMapping, myFeedPrimaryKeyColumns)
	myFeedInsertCacheMut       sync.RWMutex
	myFeedInsertCache          = make(map[string]insertCache)
	myFeedUpdateCacheMut       sync.RWMutex
	myFeedUpdateCache          = make(map[string]updateCache)
	myFeedUpsertCacheMut       sync.RWMutex
	myFeedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var myFeedAfterSelectMu sync.Mutex
var myFeedAfterSelectHooks []MyFeedHook

var myFeedBeforeInsertMu sync.Mutex
var myFeedBeforeInsertHooks []MyFeedHook
var myFeedAfterInsertMu sync.Mutex
var myFeedAfterInsertHooks []MyFeedHook

var myFeedBeforeUpdateMu sync.Mutex
var myFeedBeforeUpdateHooks []MyFeedHook
var myFeedAfterUpdateMu sync.Mutex
var myFeedAfterUpdateHooks []MyFeedHook

var myFeedBeforeDeleteMu sync.Mutex
var myFeedBeforeDeleteHooks []MyFeedHook
var myFeedAfterDeleteMu sync.Mutex
var myFeedAfterDeleteHooks []MyFeedHook

var myFeedBeforeUpsertMu sync.Mutex
var myFeedBeforeUpsertHooks []MyFeedHook
var myFeedAfterUpsertMu sync.Mutex
var myFeedAfterUpsertHooks []MyFeedHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MyFeed) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MyFeed) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MyFeed) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MyFeed) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MyFeed) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MyFeed) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MyFeed) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MyFeed) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MyFeed) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range myFeedAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMyFeedHook registers your hook function for all future operations.
func AddMyFeedHook(hookPoint boil.HookPoint, myFeedHook MyFeedHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		myFeedAfterSelectMu.Lock()
		myFeedAfterSelectHooks = append(myFeedAfterSelectHooks, myFeedHook)
		myFeedAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		myFeedBeforeInsertMu.Lock()
		myFeedBeforeInsertHooks = append(myFeedBeforeInsertHooks, myFeedHook)
		myFeedBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		myFeedAfterInsertMu.Lock()
		myFeedAfterInsertHooks = append(myFeedAfterInsertHooks, myFeedHook)
		myFeedAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		myFeedBeforeUpdateMu.Lock()
		myFeedBeforeUpdateHooks = append(myFeedBeforeUpdateHooks, myFeedHook)
		myFeedBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		myFeedAfterUpdateMu.Lock()
		myFeedAfterUpdateHooks = append(myFeedAfterUpdateHooks, myFeedHook)
		myFeedAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		myFeedBeforeDeleteMu.Lock()
		myFeedBeforeDeleteHooks = append(myFeedBeforeDeleteHooks, myFeedHook)
		myFeedBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		myFeedAfterDeleteMu.Lock()
		myFeedAfterDeleteHooks = append(myFeedAfterDeleteHooks, myFeedHook)
		myFeedAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		myFeedBeforeUpsertMu.Lock()
		myFeedBeforeUpsertHooks = append(myFeedBeforeUpsertHooks, myFeedHook)
		myFeedBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		myFeedAfterUpsertMu.Lock()
		myFeedAfterUpsertHooks = append(myFeedAfterUpsertHooks, myFeedHook)
		myFeedAfterUpsertMu.Unlock()
	}
}

// One returns a single myFeed record from the query.
func (q myFeedQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MyFeed, error) {
	o := &MyFeed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for my_feeds")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MyFeed records from the query.
func (q myFeedQuery) All(ctx context.Context, exec boil.ContextExecutor) (MyFeedSlice, error) {
	var o []*MyFeed

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to MyFeed slice")
	}

	if len(myFeedAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MyFeed records in the query.
func (q myFeedQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count my_feeds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q myFeedQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if my_feeds exists")
	}

	return count > 0, nil
}

// Feed pointed to by the foreign key.
func (o *MyFeed) Feed(mods ...qm.QueryMod) feedQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FeedID),
	}

	queryMods = append(queryMods, mods...)

	return Feeds(queryMods...)
}

// MyFeedFolder pointed to by the foreign key.
func (o *MyFeed) MyFeedFolder(mods ...qm.QueryMod) myFeedFolderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MyFeedFolderID),
	}

	queryMods = append(queryMods, mods...)

	return MyFeedFolders(queryMods...)
}

// User pointed to by the foreign key.
func (o *MyFeed) User(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Profiles(queryMods...)
}

// LoadFeed allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (myFeedL) LoadFeed(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMyFeed interface{}, mods queries.Applicator) error {
	var slice []*MyFeed
	var object *MyFeed

	if singular {
		var ok bool
		object, ok = maybeMyFeed.(*MyFeed)
		if !ok {
			object = new(MyFeed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMyFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMyFeed))
			}
		}
	} else {
		s, ok := maybeMyFeed.(*[]*MyFeed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMyFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMyFeed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &myFeedR{}
		}
		args[object.FeedID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &myFeedR{}
			}

			args[obj.FeedID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`feeds`),
		qm.WhereIn(`feeds.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Feed")
	}

	var resultSlice []*Feed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Feed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for feeds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for feeds")
	}

	if len(feedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Feed = foreign
		if foreign.R == nil {
			foreign.R = &feedR{}
		}
		foreign.R.MyFeeds = append(foreign.R.MyFeeds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FeedID == foreign.ID {
				local.R.Feed = foreign
				if foreign.R == nil {
					foreign.R = &feedR{}
				}
				foreign.R.MyFeeds = append(foreign.R.MyFeeds, local)
				break
			}
		}
	}

	return nil
}

// LoadMyFeedFolder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (myFeedL) LoadMyFeedFolder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMyFeed interface{}, mods queries.Applicator) error {
	var slice []*MyFeed
	var object *MyFeed

	if singular {
		var ok bool
		object, ok = maybeMyFeed.(*MyFeed)
		if !ok {
			object = new(MyFeed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMyFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMyFeed))
			}
		}
	} else {
		s, ok := maybeMyFeed.(*[]*MyFeed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMyFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMyFeed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &myFeedR{}
		}
		args[object.MyFeedFolderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &myFeedR{}
			}

			args[obj.MyFeedFolderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`my_feed_folders`),
		qm.WhereIn(`my_feed_folders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MyFeedFolder")
	}

	var resultSlice []*MyFeedFolder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MyFeedFolder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for my_feed_folders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for my_feed_folders")
	}

	if len(myFeedFolderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MyFeedFolder = foreign
		if foreign.R == nil {
			foreign.R = &myFeedFolderR{}
		}
		foreign.R.MyFeeds = append(foreign.R.MyFeeds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MyFeedFolderID == foreign.ID {
				local.R.MyFeedFolder = foreign
				if foreign.R == nil {
					foreign.R = &myFeedFolderR{}
				}
				foreign.R.MyFeeds = append(foreign.R.MyFeeds, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (myFeedL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMyFeed interface{}, mods queries.Applicator) error {
	var slice []*MyFeed
	var object *MyFeed

	if singular {
		var ok bool
		object, ok = maybeMyFeed.(*MyFeed)
		if !ok {
			object = new(MyFeed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMyFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMyFeed))
			}
		}
	} else {
		s, ok := maybeMyFeed.(*[]*MyFeed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMyFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMyFeed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &myFeedR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &myFeedR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`profiles`),
		qm.WhereIn(`profiles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.UserMyFeeds = append(foreign.R.UserMyFeeds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.UserMyFeeds = append(foreign.R.UserMyFeeds, local)
				break
			}
		}
	}

	return nil
}

// SetFeed of the myFeed to the related item.
// Sets o.R.Feed to related.
// Adds o to related.R.MyFeeds.
func (o *MyFeed) SetFeed(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Feed) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"my_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"feed_id"}),
		strmangle.WhereClause("\"", "\"", 2, myFeedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FeedID = related.ID
	if o.R == nil {
		o.R = &myFeedR{
			Feed: related,
		}
	} else {
		o.R.Feed = related
	}

	if related.R == nil {
		related.R = &feedR{
			MyFeeds: MyFeedSlice{o},
		}
	} else {
		related.R.MyFeeds = append(related.R.MyFeeds, o)
	}

	return nil
}

// SetMyFeedFolder of the myFeed to the related item.
// Sets o.R.MyFeedFolder to related.
// Adds o to related.R.MyFeeds.
func (o *MyFeed) SetMyFeedFolder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MyFeedFolder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"my_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"my_feed_folder_id"}),
		strmangle.WhereClause("\"", "\"", 2, myFeedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MyFeedFolderID = related.ID
	if o.R == nil {
		o.R = &myFeedR{
			MyFeedFolder: related,
		}
	} else {
		o.R.MyFeedFolder = related
	}

	if related.R == nil {
		related.R = &myFeedFolderR{
			MyFeeds: MyFeedSlice{o},
		}
	} else {
		related.R.MyFeeds = append(related.R.MyFeeds, o)
	}

	return nil
}

// SetUser of the myFeed to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserMyFeeds.
func (o *MyFeed) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"my_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, myFeedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &myFeedR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &profileR{
			UserMyFeeds: MyFeedSlice{o},
		}
	} else {
		related.R.UserMyFeeds = append(related.R.UserMyFeeds, o)
	}

	return nil
}

// MyFeeds retrieves all the records using an executor.
func MyFeeds(mods ...qm.QueryMod) myFeedQuery {
	mods = append(mods, qm.From("\"my_feeds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"my_feeds\".*"})
	}

	return myFeedQuery{q}
}

// FindMyFeed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMyFeed(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MyFeed, error) {
	myFeedObj := &MyFeed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"my_feeds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, myFeedObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from my_feeds")
	}

	if err = myFeedObj.doAfterSelectHooks(ctx, exec); err != nil {
		return myFeedObj, err
	}

	return myFeedObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MyFeed) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no my_feeds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(myFeedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	myFeedInsertCacheMut.RLock()
	cache, cached := myFeedInsertCache[key]
	myFeedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			myFeedAllColumns,
			myFeedColumnsWithDefault,
			myFeedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(myFeedType, myFeedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(myFeedType, myFeedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"my_feeds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"my_feeds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into my_feeds")
	}

	if !cached {
		myFeedInsertCacheMut.Lock()
		myFeedInsertCache[key] = cache
		myFeedInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MyFeed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MyFeed) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	myFeedUpdateCacheMut.RLock()
	cache, cached := myFeedUpdateCache[key]
	myFeedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			myFeedAllColumns,
			myFeedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update my_feeds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"my_feeds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, myFeedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(myFeedType, myFeedMapping, append(wl, myFeedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update my_feeds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for my_feeds")
	}

	if !cached {
		myFeedUpdateCacheMut.Lock()
		myFeedUpdateCache[key] = cache
		myFeedUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q myFeedQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for my_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for my_feeds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MyFeedSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), myFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"my_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, myFeedPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in myFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all myFeed")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MyFeed) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no my_feeds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(myFeedColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	myFeedUpsertCacheMut.RLock()
	cache, cached := myFeedUpsertCache[key]
	myFeedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			myFeedAllColumns,
			myFeedColumnsWithDefault,
			myFeedColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			myFeedAllColumns,
			myFeedPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert my_feeds, could not build update column list")
		}

		ret := strmangle.SetComplement(myFeedAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(myFeedPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert my_feeds, could not build conflict column list")
			}

			conflict = make([]string, len(myFeedPrimaryKeyColumns))
			copy(conflict, myFeedPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"my_feeds\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(myFeedType, myFeedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(myFeedType, myFeedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert my_feeds")
	}

	if !cached {
		myFeedUpsertCacheMut.Lock()
		myFeedUpsertCache[key] = cache
		myFeedUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MyFeed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MyFeed) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no MyFeed provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), myFeedPrimaryKeyMapping)
	sql := "DELETE FROM \"my_feeds\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from my_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for my_feeds")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q myFeedQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no myFeedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from my_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for my_feeds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MyFeedSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(myFeedBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), myFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"my_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, myFeedPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from myFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for my_feeds")
	}

	if len(myFeedAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MyFeed) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMyFeed(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MyFeedSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MyFeedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), myFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"my_feeds\".* FROM \"my_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, myFeedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in MyFeedSlice")
	}

	*o = slice

	return nil
}

// MyFeedExists checks if the MyFeed row exists.
func MyFeedExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"my_feeds\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if my_feeds exists")
	}

	return exists, nil
}

// Exists checks if the MyFeed row exists.
func (o *MyFeed) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MyFeedExists(ctx, exec, o.ID)
}
