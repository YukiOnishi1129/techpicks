// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Platform is an object representing the database table.
type Platform struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	SiteURL      string    `boil:"site_url" json:"site_url" toml:"site_url" yaml:"site_url"`
	PlatformType int       `boil:"platform_type" json:"platform_type" toml:"platform_type" yaml:"platform_type"`
	FaviconURL   string    `boil:"favicon_url" json:"favicon_url" toml:"favicon_url" yaml:"favicon_url"`
	IsEng        bool      `boil:"is_eng" json:"is_eng" toml:"is_eng" yaml:"is_eng"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *platformR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L platformL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlatformColumns = struct {
	ID           string
	Name         string
	SiteURL      string
	PlatformType string
	FaviconURL   string
	IsEng        string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	Name:         "name",
	SiteURL:      "site_url",
	PlatformType: "platform_type",
	FaviconURL:   "favicon_url",
	IsEng:        "is_eng",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

var PlatformTableColumns = struct {
	ID           string
	Name         string
	SiteURL      string
	PlatformType string
	FaviconURL   string
	IsEng        string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "platforms.id",
	Name:         "platforms.name",
	SiteURL:      "platforms.site_url",
	PlatformType: "platforms.platform_type",
	FaviconURL:   "platforms.favicon_url",
	IsEng:        "platforms.is_eng",
	CreatedAt:    "platforms.created_at",
	UpdatedAt:    "platforms.updated_at",
	DeletedAt:    "platforms.deleted_at",
}

// Generated where

var PlatformWhere = struct {
	ID           whereHelperstring
	Name         whereHelperstring
	SiteURL      whereHelperstring
	PlatformType whereHelperint
	FaviconURL   whereHelperstring
	IsEng        whereHelperbool
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "\"platforms\".\"id\""},
	Name:         whereHelperstring{field: "\"platforms\".\"name\""},
	SiteURL:      whereHelperstring{field: "\"platforms\".\"site_url\""},
	PlatformType: whereHelperint{field: "\"platforms\".\"platform_type\""},
	FaviconURL:   whereHelperstring{field: "\"platforms\".\"favicon_url\""},
	IsEng:        whereHelperbool{field: "\"platforms\".\"is_eng\""},
	CreatedAt:    whereHelpertime_Time{field: "\"platforms\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"platforms\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"platforms\".\"deleted_at\""},
}

// PlatformRels is where relationship names are stored.
var PlatformRels = struct {
	Articles string
	Feeds    string
}{
	Articles: "Articles",
	Feeds:    "Feeds",
}

// platformR is where relationships are stored.
type platformR struct {
	Articles ArticleSlice `boil:"Articles" json:"Articles" toml:"Articles" yaml:"Articles"`
	Feeds    FeedSlice    `boil:"Feeds" json:"Feeds" toml:"Feeds" yaml:"Feeds"`
}

// NewStruct creates a new relationship struct
func (*platformR) NewStruct() *platformR {
	return &platformR{}
}

func (r *platformR) GetArticles() ArticleSlice {
	if r == nil {
		return nil
	}
	return r.Articles
}

func (r *platformR) GetFeeds() FeedSlice {
	if r == nil {
		return nil
	}
	return r.Feeds
}

// platformL is where Load methods for each relationship are stored.
type platformL struct{}

var (
	platformAllColumns            = []string{"id", "name", "site_url", "platform_type", "favicon_url", "is_eng", "created_at", "updated_at", "deleted_at"}
	platformColumnsWithoutDefault = []string{"name", "site_url", "platform_type", "favicon_url"}
	platformColumnsWithDefault    = []string{"id", "is_eng", "created_at", "updated_at", "deleted_at"}
	platformPrimaryKeyColumns     = []string{"id"}
	platformGeneratedColumns      = []string{}
)

type (
	// PlatformSlice is an alias for a slice of pointers to Platform.
	// This should almost always be used instead of []Platform.
	PlatformSlice []*Platform
	// PlatformHook is the signature for custom Platform hook methods
	PlatformHook func(context.Context, boil.ContextExecutor, *Platform) error

	platformQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	platformType                 = reflect.TypeOf(&Platform{})
	platformMapping              = queries.MakeStructMapping(platformType)
	platformPrimaryKeyMapping, _ = queries.BindMapping(platformType, platformMapping, platformPrimaryKeyColumns)
	platformInsertCacheMut       sync.RWMutex
	platformInsertCache          = make(map[string]insertCache)
	platformUpdateCacheMut       sync.RWMutex
	platformUpdateCache          = make(map[string]updateCache)
	platformUpsertCacheMut       sync.RWMutex
	platformUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var platformAfterSelectMu sync.Mutex
var platformAfterSelectHooks []PlatformHook

var platformBeforeInsertMu sync.Mutex
var platformBeforeInsertHooks []PlatformHook
var platformAfterInsertMu sync.Mutex
var platformAfterInsertHooks []PlatformHook

var platformBeforeUpdateMu sync.Mutex
var platformBeforeUpdateHooks []PlatformHook
var platformAfterUpdateMu sync.Mutex
var platformAfterUpdateHooks []PlatformHook

var platformBeforeDeleteMu sync.Mutex
var platformBeforeDeleteHooks []PlatformHook
var platformAfterDeleteMu sync.Mutex
var platformAfterDeleteHooks []PlatformHook

var platformBeforeUpsertMu sync.Mutex
var platformBeforeUpsertHooks []PlatformHook
var platformAfterUpsertMu sync.Mutex
var platformAfterUpsertHooks []PlatformHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Platform) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Platform) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Platform) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Platform) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Platform) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Platform) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Platform) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Platform) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Platform) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range platformAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlatformHook registers your hook function for all future operations.
func AddPlatformHook(hookPoint boil.HookPoint, platformHook PlatformHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		platformAfterSelectMu.Lock()
		platformAfterSelectHooks = append(platformAfterSelectHooks, platformHook)
		platformAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		platformBeforeInsertMu.Lock()
		platformBeforeInsertHooks = append(platformBeforeInsertHooks, platformHook)
		platformBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		platformAfterInsertMu.Lock()
		platformAfterInsertHooks = append(platformAfterInsertHooks, platformHook)
		platformAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		platformBeforeUpdateMu.Lock()
		platformBeforeUpdateHooks = append(platformBeforeUpdateHooks, platformHook)
		platformBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		platformAfterUpdateMu.Lock()
		platformAfterUpdateHooks = append(platformAfterUpdateHooks, platformHook)
		platformAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		platformBeforeDeleteMu.Lock()
		platformBeforeDeleteHooks = append(platformBeforeDeleteHooks, platformHook)
		platformBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		platformAfterDeleteMu.Lock()
		platformAfterDeleteHooks = append(platformAfterDeleteHooks, platformHook)
		platformAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		platformBeforeUpsertMu.Lock()
		platformBeforeUpsertHooks = append(platformBeforeUpsertHooks, platformHook)
		platformBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		platformAfterUpsertMu.Lock()
		platformAfterUpsertHooks = append(platformAfterUpsertHooks, platformHook)
		platformAfterUpsertMu.Unlock()
	}
}

// One returns a single platform record from the query.
func (q platformQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Platform, error) {
	o := &Platform{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for platforms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Platform records from the query.
func (q platformQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlatformSlice, error) {
	var o []*Platform

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Platform slice")
	}

	if len(platformAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Platform records in the query.
func (q platformQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count platforms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q platformQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if platforms exists")
	}

	return count > 0, nil
}

// Articles retrieves all the article's Articles with an executor.
func (o *Platform) Articles(mods ...qm.QueryMod) articleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"articles\".\"platform_id\"=?", o.ID),
	)

	return Articles(queryMods...)
}

// Feeds retrieves all the feed's Feeds with an executor.
func (o *Platform) Feeds(mods ...qm.QueryMod) feedQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"feeds\".\"platform_id\"=?", o.ID),
	)

	return Feeds(queryMods...)
}

// LoadArticles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (platformL) LoadArticles(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlatform interface{}, mods queries.Applicator) error {
	var slice []*Platform
	var object *Platform

	if singular {
		var ok bool
		object, ok = maybePlatform.(*Platform)
		if !ok {
			object = new(Platform)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlatform)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlatform))
			}
		}
	} else {
		s, ok := maybePlatform.(*[]*Platform)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlatform)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlatform))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &platformR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &platformR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`articles`),
		qm.WhereIn(`articles.platform_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load articles")
	}

	var resultSlice []*Article
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice articles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on articles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for articles")
	}

	if len(articleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Articles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &articleR{}
			}
			foreign.R.Platform = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlatformID {
				local.R.Articles = append(local.R.Articles, foreign)
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.Platform = local
				break
			}
		}
	}

	return nil
}

// LoadFeeds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (platformL) LoadFeeds(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlatform interface{}, mods queries.Applicator) error {
	var slice []*Platform
	var object *Platform

	if singular {
		var ok bool
		object, ok = maybePlatform.(*Platform)
		if !ok {
			object = new(Platform)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlatform)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlatform))
			}
		}
	} else {
		s, ok := maybePlatform.(*[]*Platform)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlatform)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlatform))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &platformR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &platformR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`feeds`),
		qm.WhereIn(`feeds.platform_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load feeds")
	}

	var resultSlice []*Feed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice feeds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on feeds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for feeds")
	}

	if len(feedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Feeds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &feedR{}
			}
			foreign.R.Platform = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlatformID {
				local.R.Feeds = append(local.R.Feeds, foreign)
				if foreign.R == nil {
					foreign.R = &feedR{}
				}
				foreign.R.Platform = local
				break
			}
		}
	}

	return nil
}

// AddArticles adds the given related objects to the existing relationships
// of the platform, optionally inserting them as new records.
// Appends related to o.R.Articles.
// Sets related.R.Platform appropriately.
func (o *Platform) AddArticles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Article) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlatformID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"articles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"platform_id"}),
				strmangle.WhereClause("\"", "\"", 2, articlePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlatformID = o.ID
		}
	}

	if o.R == nil {
		o.R = &platformR{
			Articles: related,
		}
	} else {
		o.R.Articles = append(o.R.Articles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &articleR{
				Platform: o,
			}
		} else {
			rel.R.Platform = o
		}
	}
	return nil
}

// AddFeeds adds the given related objects to the existing relationships
// of the platform, optionally inserting them as new records.
// Appends related to o.R.Feeds.
// Sets related.R.Platform appropriately.
func (o *Platform) AddFeeds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Feed) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlatformID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"feeds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"platform_id"}),
				strmangle.WhereClause("\"", "\"", 2, feedPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlatformID = o.ID
		}
	}

	if o.R == nil {
		o.R = &platformR{
			Feeds: related,
		}
	} else {
		o.R.Feeds = append(o.R.Feeds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &feedR{
				Platform: o,
			}
		} else {
			rel.R.Platform = o
		}
	}
	return nil
}

// Platforms retrieves all the records using an executor.
func Platforms(mods ...qm.QueryMod) platformQuery {
	mods = append(mods, qm.From("\"platforms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"platforms\".*"})
	}

	return platformQuery{q}
}

// FindPlatform retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlatform(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Platform, error) {
	platformObj := &Platform{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"platforms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, platformObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from platforms")
	}

	if err = platformObj.doAfterSelectHooks(ctx, exec); err != nil {
		return platformObj, err
	}

	return platformObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Platform) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no platforms provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(platformColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	platformInsertCacheMut.RLock()
	cache, cached := platformInsertCache[key]
	platformInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			platformAllColumns,
			platformColumnsWithDefault,
			platformColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(platformType, platformMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(platformType, platformMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"platforms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"platforms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into platforms")
	}

	if !cached {
		platformInsertCacheMut.Lock()
		platformInsertCache[key] = cache
		platformInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Platform.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Platform) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	platformUpdateCacheMut.RLock()
	cache, cached := platformUpdateCache[key]
	platformUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			platformAllColumns,
			platformPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update platforms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"platforms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, platformPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(platformType, platformMapping, append(wl, platformPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update platforms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for platforms")
	}

	if !cached {
		platformUpdateCacheMut.Lock()
		platformUpdateCache[key] = cache
		platformUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q platformQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for platforms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for platforms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlatformSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), platformPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"platforms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, platformPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in platform slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all platform")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Platform) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no platforms provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(platformColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	platformUpsertCacheMut.RLock()
	cache, cached := platformUpsertCache[key]
	platformUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			platformAllColumns,
			platformColumnsWithDefault,
			platformColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			platformAllColumns,
			platformPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert platforms, could not build update column list")
		}

		ret := strmangle.SetComplement(platformAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(platformPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert platforms, could not build conflict column list")
			}

			conflict = make([]string, len(platformPrimaryKeyColumns))
			copy(conflict, platformPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"platforms\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(platformType, platformMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(platformType, platformMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert platforms")
	}

	if !cached {
		platformUpsertCacheMut.Lock()
		platformUpsertCache[key] = cache
		platformUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Platform record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Platform) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Platform provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), platformPrimaryKeyMapping)
	sql := "DELETE FROM \"platforms\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from platforms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for platforms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q platformQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no platformQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from platforms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for platforms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlatformSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(platformBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), platformPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"platforms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, platformPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from platform slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for platforms")
	}

	if len(platformAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Platform) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlatform(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlatformSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlatformSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), platformPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"platforms\".* FROM \"platforms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, platformPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in PlatformSlice")
	}

	*o = slice

	return nil
}

// PlatformExists checks if the Platform row exists.
func PlatformExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"platforms\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if platforms exists")
	}

	return exists, nil
}

// Exists checks if the Platform row exists.
func (o *Platform) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlatformExists(ctx, exec, o.ID)
}
